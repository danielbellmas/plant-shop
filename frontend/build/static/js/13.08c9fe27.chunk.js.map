{"version":3,"sources":["images/plant.png","components/Contacts.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts","../node_modules/regenerator-runtime/runtime.js"],"names":["Contacts","useForm","register","handleSubmit","watch","reset","watchAllFields","validateEmail","email","match","className","onSubmit","data","Swal","fire","title","icon","html","width","toast","position","padding","backdrop","plant","TextField","required","margin","variant","id","name","label","autoComplete","error","helperText","multiline","Button","style","background","color","type","size","src","alt","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","err","undefined","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","TypeError","normalCompletion","didErr","step","next","_e2","element","isObjectType","isNullOrUndefined","Date","substring","search","names","some","current","getNodeParentName","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","copy","FormContext","displayName","props","Provider","omit","children","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","isObject","formStateData","isEmptyObject","find","window","HTMLElement","document","isWeb","useController","rules","control","shouldUnregister","methods","defaultValuesRef","fieldsRef","unregister","fieldArrayNamesRef","controllerSubjectRef","shouldUnmount","inFieldArrayActionRef","onChange","onBlur","ref","isFieldArray","_f","setInputStateValue","formStateRef","formStateSubjectRef","nameRef","updateFormState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","formStateSubscription","subscribe","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useFormState","controllerSubscription","values","shouldUnmountField","mount","field","event","isCheckBoxInput","checked","getControllerValue","elm","fieldState","invalid","isTouched","Controller","render","validateAllFieldCriteria","message","types","test","input","replace","set","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","mounted","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","tearDowns","tearDown","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","unregisterFieldsNamesRef","watchSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","validationMode","getValidationModes","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","updatedFormState","setFieldValue","rawValue","shouldRegister","isHTMLElement","radioRef","selectRef","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","schemaResult","all","fieldName","setInternalValues","inputKey","has","isFieldWatched","updateValidAndValue","isWithinRefCallback","defaultChecked","hasValidation","setValue","isReset","setFieldArrayDirtyFields","getValues","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","currentError","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","resetFromState","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","registerAbsentFields","File","keepStateOptions","updatedValues","keepValues","inputRef","closest","setFocus","useFieldArraySubscription","isLiveInDom","runtime","Op","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","Context","_invoke","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","constructor","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"2LAAe,MAA0B,kC,iCCiH1BA,UA3GE,WACf,MAAiDC,cAAzCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAAOC,EAAvC,EAAuCA,MACjCC,EAAiBF,IAmCjBG,EAAgB,WAAO,IAAD,EAC1B,QAAO,OAACD,QAAD,IAACA,GAAD,UAACA,EAAgBE,aAAjB,aAAC,EAAuBC,MAC7B,8EAIJ,OACE,sBAAKC,UAAU,YAAf,UACE,oBAAIA,UAAU,kBAAd,qBAEA,uBAAMA,UAAU,gBAAgBC,SAAUR,GA3CvB,SAACS,GAIjBL,IAmBHM,IAAKC,KAAK,CACRC,MAAO,oBACPC,KAAM,QACNC,KAAM,iDACNC,MAAO,IACPC,OAAO,EACPC,SAAU,YAvBZP,IAAKC,KAAK,CACRC,MAAO,gBACPC,KAAM,UACNC,KAAM,qBACNC,MAAO,IACPG,QAAS,MACTC,SAAS,+CAAD,OAEHC,EAFG,mDASVlB,EAAMO,OAsBN,UACE,cAACY,EAAA,EAAD,2BACMtB,EAAS,SADf,IAEEQ,UAAU,aACVe,UAAQ,EACRC,OAAO,SACPC,QAAQ,WACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,aAAa,UAEf,cAACP,EAAA,EAAD,2BACMtB,EAAS,UADf,IAEE0B,GAAG,QACHC,KAAK,QACLnB,UAAU,aACVe,UAAQ,EACRE,QAAQ,WACRG,MAAM,QACNJ,OAAO,SACPK,aAAa,QACbC,MAAOzB,IACP0B,WAAY1B,IAAkB,mBAAqB,MAErD,cAACiB,EAAA,EAAD,2BACMtB,EAAS,YADf,IAEE0B,GAAG,UACHC,KAAK,UACLnB,UAAU,aACVe,UAAQ,EACRC,OAAO,SACPC,QAAQ,WACRG,MAAM,aAER,cAACN,EAAA,EAAD,2BACMtB,EAAS,YADf,IAEE0B,GAAG,UACHC,KAAK,UACLnB,UAAU,aACVe,UAAQ,EACRC,OAAO,SACPQ,WAAS,EACTP,QAAQ,WACRG,MAAM,kBAER,cAACK,EAAA,EAAD,CACEC,MAAO,CAAEC,WAAY,UAAWC,MAAO,cACvCX,QAAQ,YACRY,KAAK,SACLC,KAAK,QAJP,qBASF,qBAAKZ,GAAG,aAAaa,IAAKlB,EAAOmB,IAAI,oB,gCC5G3C,8CAEA,SAASC,EAAQC,EAAQC,GACvB,IAAIC,EAAOC,OAAOD,KAAKF,GAEvB,GAAIG,OAAOC,sBAAuB,CAChC,IAAIC,EAAUF,OAAOC,sBAAsBJ,GACvCC,IAAgBI,EAAUA,EAAQC,QAAO,SAAUC,GACrD,OAAOJ,OAAOK,yBAAyBR,EAAQO,GAAKE,eAEtDP,EAAKQ,KAAKC,MAAMT,EAAMG,GAGxB,OAAOH,EAGM,SAASU,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAE/CA,EAAI,EACNf,EAAQI,OAAOc,IAAS,GAAMC,SAAQ,SAAUC,GAC9C,YAAeN,EAAQM,EAAKF,EAAOE,OAE5BhB,OAAOiB,0BAChBjB,OAAOkB,iBAAiBR,EAAQV,OAAOiB,0BAA0BH,IAEjElB,EAAQI,OAAOc,IAASC,SAAQ,SAAUC,GACxChB,OAAOmB,eAAeT,EAAQM,EAAKhB,OAAOK,yBAAyBS,EAAQE,OAKjF,OAAON,I,mBCjCTU,EAAOC,QAAU,EAAQ,K,gCCAzB,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQX,EAAKY,GACpE,IACE,IAAIC,EAAON,EAAIP,GAAKY,GAChBE,EAAQD,EAAKC,MACjB,MAAO7C,GAEP,YADAwC,EAAOxC,GAIL4C,EAAKE,KACPP,EAAQM,GAERE,QAAQR,QAAQM,GAAOG,KAAKP,EAAOC,GAIxB,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAO1B,UACX,OAAO,IAAIoB,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMY,EAAG3B,MAAM4B,EAAME,GAEzB,SAASZ,EAAMI,GACbR,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQG,GAGlE,SAASH,EAAOY,GACdjB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASY,GAGnEb,OAAMc,OA/BZ,mC,8NCCe,SAASC,EAA2BC,EAAGC,GACpD,IAAIC,EAEJ,GAAsB,qBAAXC,QAAgD,MAAtBH,EAAEG,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQN,KAAOE,EAAK,OAAAK,EAAA,GAA2BP,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAE7B,OAAqB,CAC/G+B,IAAIF,EAAIE,GACZ,IAAIjC,EAAI,EAEJuC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIzC,GAAK+B,EAAE7B,OAAe,CACxBkB,MAAM,GAED,CACLA,MAAM,EACND,MAAOY,EAAE/B,OAGb0C,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGL,GAIP,MAAM,IAAIM,UAAU,yIAGtB,IAEIjB,EAFAkB,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLP,EAAG,WACDP,EAAKF,EAAEG,OAAOC,aAEhBM,EAAG,WACD,IAAIO,EAAOf,EAAGgB,OAEd,OADAH,EAAmBE,EAAK5B,KACjB4B,GAETN,EAAG,SAAWQ,GACZH,GAAS,EACTnB,EAAMsB,GAERN,EAAG,WACD,IACOE,GAAoC,MAAhBb,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIc,EAAQ,MAAMnB,K,mCClD1B,EAAe,SAACuB,GAAD,MACI,aAAjBA,EAAQtE,MCHV,EAAe,SAACsC,GAAD,OAAwD,MAATA,GCEjDiC,EAAe,SAACjC,GAAD,MAAqC,kBAAVA,GAEvD,EAAe,SAAmBA,GAAnB,OACZkC,EAAkBlC,KAClBiB,MAAMC,QAAQlB,IACfiC,EAAajC,MACXA,aAAiBmC,OCRrB,EAAe,SAACnF,GAAD,OAAkBA,EAAKoF,UAAU,EAAGpF,EAAKqF,OAAO,SAAWrF,GCI1E,EAAe,SAACsF,EAA+BtF,GAAhC,OACb,YAAIsF,GAAOC,MAAK,SAACC,GAAD,OAAaC,EAAkBzF,KAAUwF,MCL3D,EAAe,SAACxC,GAAD,OAAkBA,EAAM3B,OAAOqE,UCA9C,EAAe,SAACC,GAAD,YAA4CjC,IAARiC,GCInD,EAAe,WAAoD,IAAnDC,EAAmD,uDAAxC,GAAIC,EAAoC,uCAAtBC,EAAsB,uCAC3DC,EAASC,EAAQH,EAAKI,MAAM,cAAcC,QAC9C,SAACH,EAAQ7D,GAAT,OAAkBgD,EAAkBa,GAAUA,EAASA,EAAO7D,KAC9D0D,GAGF,OAAOO,EAAYJ,IAAWA,IAAWH,EACrCO,EAAYP,EAAIC,IACdC,EACAF,EAAIC,GACNE,GCZOK,EACL,OADKA,EAEH,SAGGC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAKMC,EAAY,YAEZC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WC1BZ,EAAe,SACbvE,EACAE,GAEA,IAAMsE,EAAO,OAAH,UAAQxE,GAGlB,cAFOwE,EAAKtE,GAELsE,GCFHC,EAAc,gBAA0C,MAE9DA,EAAYC,YAAc,a,IAEb,EAAiB,kBAG5B,aAAiBD,IAEN,EAAe,SAC1BE,GAD0B,OAG1B,gBAACF,EAAYG,SAAQ,CACnB5D,MAAO6D,EAAKF,EAAO,aAElBA,EAAMG,WCfX,EAAe,SACbC,EACAC,EACAC,EACAC,GAJa,IAKbC,IALa,gEAObJ,EACI,IAAIK,MAAMJ,EAAW,CACnBK,IAAK,SAACzB,EAAK0B,GACT,GAAIA,KAAQ1B,EAQV,OAPIqB,EAAiBzB,QAAQ8B,KAAUjB,IACrCY,EAAiBzB,QAAQ8B,IAAQH,GAC7Bd,GAGNa,IACGA,EAAsB1B,QAAQ8B,IAAQ,GAClC1B,EAAI0B,MAMjBN,GCzBN,EAAe,SAAChE,GAAD,OACbuE,EAASvE,KAAW9B,OAAOD,KAAK+B,GAAOjB,QCAzC,EAAe,SACbyF,EACAP,EACAE,GAEA,IAAMH,EAAYH,EAAKW,EAAe,QAEtC,OACEC,EAAcT,IACd9F,OAAOD,KAAK+F,GAAWjF,QAAUb,OAAOD,KAAKgG,GAAkBlF,QAC/Db,OAAOD,KAAK+F,GAAWU,MACrB,SAACxF,GAAD,OACE+E,EAAiB/E,OAChBiF,GAASd,OClBlB,EAAe,SAAoBrD,GAApB,OACbiB,MAAMC,QAAQlB,GAASA,EAAQ,CAACA,ICClC,SAAsB2E,SAAWrB,UACxBqB,OAAOC,cAAgBtB,UACvBuB,WAAavB,ECAhBS,EAAiBe,EAAQ,UAAWH,cAAgBP,QAAUd,E,SCapDyB,E,GAS0B,IALxC/H,EAKwC,EALxCA,KACAgI,EAIwC,EAJxCA,MACAlC,EAGwC,EAHxCA,aACAmC,EAEwC,EAFxCA,QACAC,EACwC,EADxCA,iBAKMC,EAAU,IAChB,EASIF,GAAWE,EAAQF,QARrBG,EADF,EACEA,iBACA/J,EAFF,EAEEA,SACAgK,EAHF,EAGEA,UACAC,EAJF,EAIEA,WACAC,EALF,EAKEA,mBACAC,EANF,EAMEA,qBACAC,EAPF,EAOEA,cACAC,EARF,EAQEA,sBAGF,EAAkCrK,EAAS2B,EAAMgI,GAAzC,EAAR,EAAQW,SAAU,EAAlB,EAAkBC,OAAQ,EAA1B,EAA0BC,IACpBC,EAAe,EAAmBP,EAAmB/C,QAASxF,GACpE,EAAoC,WAClCmG,EAAY,EAAIkC,EAAU7C,QAASxF,GAAM+I,GAAG/F,QAAU8F,EAClD3C,EAAYL,GACV,EAAIsC,EAAiB5C,QAASxF,GAC9B8F,EACF,EAAIuC,EAAU7C,QAASxF,GAAM+I,GAAG/F,OALtC,mBAAOA,EAAP,KAAcgG,EAAd,KAOMhC,ECpCR,SACEL,GAEA,MAA0BA,GAAS,GAA3BsB,EAAR,EAAQA,QAASjI,EAAjB,EAAiBA,KACXmI,EAAU,IAChB,EACEF,GAAWE,EAAQF,QADbgB,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,oBAAqBjC,EAA3C,EAA2CA,iBAErCkC,EAAU,SAAgCnJ,GAChDmJ,EAAQ3D,QAAUxF,EAElB,MAAqC,WAAeiJ,EAAazD,SAAjE,mBAAOwB,EAAP,KAAkBoC,EAAlB,KACMC,EAAgB,SAAa,CACjCC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,IAmBV,OAhBA,aAAgB,WACd,IAAMC,EAAwBV,EAAoB1D,QAAQqE,UAAU,CAClE/E,KAAM,SAACkC,GAAD,QACFmC,EAAQ3D,UACPwB,EAAUhH,MACX8J,EAAsBX,EAAQ3D,SAASuE,SAAS/C,EAAUhH,QAC5DgK,EAAsBhD,EAAWqC,EAAc7D,UAC/C4D,EAAgB,OAAD,wBACVH,EAAazD,SACbwB,OAIT,OAAO,kBAAM4C,EAAsBK,iBAClC,IAEIC,EACLnD,EACAC,EACAC,EACAoC,GACA,GDLgBc,CAAa,CAC7BlC,QAASA,GAAWE,EAAQF,QAC5BjI,SA2BF,OAzBA,EAAIqI,EAAU7C,QAASxF,GAAM+I,GAAG/F,MAAQA,EAExC,aAAgB,WACd,IAAMoH,EAAyB5B,EAAqBhD,QAAQqE,UAAU,CACpE/E,KAAM,SAAC/F,GAAD,QACFA,EAAKiB,MAAQA,IAASjB,EAAKiB,OAC7BgJ,EAAmB,EAAIjK,EAAKsL,OAAQrK,OAGxC,OAAO,WACLoK,EAAuBH,cACvB,IAAMK,EAAqB7B,GAAiBP,GAG1CY,EACIwB,IAAuB5B,EAAsBlD,QAC7C8E,GAEJhC,EAAWtI,GACF,EAAIqI,EAAU7C,QAASxF,KAChC,EAAIqI,EAAU7C,QAASxF,GAAM+I,GAAGwB,OAAQ,MAG3C,CAACvK,IAEG,CACLwK,MAAO,CACL7B,SAAU,SAAC8B,GACT,IAAMzH,EE9EC,SAACyH,GAAD,OACblD,EAASkD,IAAWA,EAAgB7I,OAChC8I,EAAiBD,EAAgB7I,QAC9B6I,EAAgB7I,OAAO+I,QACvBF,EAAgB7I,OAAOoB,MAC1ByH,EFyEgBG,CAAmBH,GACjCzB,EAAmBhG,GAEnB,EAAS,CACPpB,OAAQ,CACNoB,QACAhD,KAAMA,GAERU,KAAM0F,KAGVwC,OAAQ,WACN,EAAO,CACLhH,OAAQ,CACN5B,KAAMA,GAERU,KAAM0F,KAGVpG,OACAgD,QACA6F,IAAK,SAACgC,GAAD,OAASA,GAAO,EAAIA,KAE3B7D,YACA8D,WAAY5J,OAAOkB,iBACjB,GACA,CACE2I,QAAS,CACP1D,IADO,WAEL,QAAS,EAAIL,EAAU2C,OAAQ3J,KAGnCsJ,QAAS,CACPjC,IADO,WAEL,QAAS,EAAIL,EAAUuC,YAAavJ,KAGxCgL,UAAW,CACT3D,IADS,WAEP,QAAS,EAAIL,EAAUwC,cAAexJ,KAG1CG,MAAO,CACLkH,IADK,WAEH,OAAO,EAAIL,EAAU2C,OAAQ3J,Q,IG5HnCiL,EAAa,SAIjBtE,GAJiB,OAKdA,EAAMuE,OAAOnD,EAAmCpB,KCFrD,EAAe,SACb3G,EACAmL,EACAxB,EACAjJ,EACA0K,GALa,OAObD,E,+BAESxB,EAAO3J,IAAK,CACfqL,MAAO,OAAF,wBACC1B,EAAO3J,IAAS2J,EAAO3J,GAAOqL,MAAQ1B,EAAO3J,GAAOqL,MAAQ,IAD7D,eAEF3K,EAAO0K,IAAW,MAGvB,ICrBN,EAAe,SAACpI,GAAD,MAAmB,QAAQsI,KAAKtI,ICE/C,EAAe,SAACuI,GAAD,OACbvF,EAAQuF,EAAMC,QAAQ,YAAa,IAAIvF,MAAM,W,SCGvBwF,EACtB1K,EACA8E,EACA7C,GAOA,IALA,IAAI0I,GAAS,EACPC,EAAWC,EAAM/F,GAAQ,CAACA,GAAQgG,EAAahG,GAC/C9D,EAAS4J,EAAS5J,OAClB+J,EAAY/J,EAAS,IAElB2J,EAAQ3J,GAAQ,CACvB,IAAMG,EAAMyJ,EAASD,GACjBK,EAAW/I,EAEf,GAAI0I,IAAUI,EAAW,CACvB,IAAME,EAAWjL,EAAOmB,GACxB6J,EACExE,EAASyE,IAAa/H,MAAMC,QAAQ8H,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,GADA,GAGR3K,EAAOmB,GAAO6J,EACdhL,EAASA,EAAOmB,GAElB,OAAOnB,EC1BT,IAAM,GAAe,SAAfmL,EACJC,EACAC,EACAC,GAAoC,UAElBA,GAAenL,OAAOD,KAAKkL,IAFT,IAEpC,2BAAsD,KAA3CjK,EAA2C,QAC9CsI,EAAQ,EAAI2B,EAAQjK,GAE1B,GAAIsI,EAAO,CACT,IAAMzB,EAAKyB,EAAMzB,GACXvD,EAAUqB,EAAK2D,EAAO,MAE5B,GAAIzB,GAAMqD,EAASrD,EAAG/I,MAAO,CAC3B,GAAI+I,EAAGF,IAAIyD,OAASnG,EAAY4C,EAAGF,IAAIyD,SACrC,MACK,GAAIvD,EAAGwD,KAAM,CAClBxD,EAAGwD,KAAK,GAAGD,QACX,YAEO/E,EAAS/B,IAClB0G,EAAa1G,EAAS4G,KAjBQ,gCCFhCI,GAAkB,SAAlBA,EACJnE,EACAD,GACwB,IAAxBqE,EAAwB,uDAAF,GAEtB,IAAK,IAAMzM,KAAQqI,EAAU7C,QAAS,CACpC,IAAMgF,EAAQnC,EAAU7C,QAAQxF,GAEhC,GAAIwK,IAAUtF,EAAkBuH,GAAS,CACvC,IAAM1D,EAAKyB,EAAMzB,GACXvD,EAAUqB,EAAK2D,EAAO,MAE5BiB,EACEgB,EACAzM,EACA+I,GAAMA,EAAGF,IACLE,EAAGF,IAAI6D,UAAa3D,EAAGwD,MAAQxD,EAAGwD,KAAKI,OAAM,SAAC9D,GAAD,OAASA,EAAI6D,iBACxDhJ,EACAqF,EAAG/F,MACLiB,MAAMC,QAAQsG,GACd,GACA,IAGNhF,GACEgH,EACE,CACEhH,WAEF4C,EACAqE,EAAOzM,KAKf,OAAOyM,GCrCT,GAAe,SAACzJ,GAAD,OACbkC,EAAkBlC,KAAWiC,EAAajC,I,SCApB4J,GACtBC,EACAC,EACAC,GAEA,GACEC,GAAYH,IACZG,GAAYF,IACZD,aAAmB1H,MACnB2H,aAAmB3H,KAEnB,OAAO0H,IAAYC,EAGrB,IAAK,iBAAqBD,GAAU,CAClC,IAAMI,EAAQ/L,OAAOD,KAAK4L,GACpBK,EAAQhM,OAAOD,KAAK6L,GAE1B,GAAIG,EAAMlL,SAAWmL,EAAMnL,OACzB,OAAO,EAGT,cAAkBkL,EAAlB,eAAyB,CAApB,IAAM/K,EAAG,KACNiL,EAAON,EAAQ3K,GAErB,IAAM6K,GAAyB,QAAR7K,EAAgB,CACrC,IAAMkL,EAAON,EAAQ5K,GAErB,IACGqF,EAAS4F,IAASlJ,MAAMC,QAAQiJ,MAChC5F,EAAS6F,IAASnJ,MAAMC,QAAQkJ,KAC5BR,GAAUO,EAAMC,EAAML,GACvBI,IAASC,EAEb,OAAO,IAMf,OAAO,E,SC3COC,GAGdzL,EAAWI,GACX,GAAIgL,GAAYpL,IAAWoL,GAAYhL,GACrC,OAAOA,EAGT,IAAK,IAAME,KAAOF,EAAQ,CACxB,IAAMsL,EAAc1L,EAAOM,GACrBqL,EAAcvL,EAAOE,GAE3B,IACEN,EAAOM,GACJqF,EAAS+F,IAAgB/F,EAASgG,IAClCtJ,MAAMC,QAAQoJ,IAAgBrJ,MAAMC,QAAQqJ,GACzCF,GAAUC,EAAaC,GACvBA,EACN,WAGJ,OAAO3L,ECnBT,SAAS4L,GAKPnD,EACAoD,EACAlE,EACAmE,EACAC,GAIA,IAFA,IAAIjC,GAAS,IAEJA,EAAQrB,EAAOtI,QAAQ,CAC9B,IAAK,IAAMG,KAAOmI,EAAOqB,GACnBzH,MAAMC,QAAQmG,EAAOqB,GAAOxJ,MAC7BqH,EAAYmC,KAAWnC,EAAYmC,GAAS,IAC7CnC,EAAYmC,GAAOxJ,GAAO,GAC1BsL,GACEnD,EAAOqB,GAAOxJ,GACd,EAAIuL,EAAc/B,IAAU,GAAIxJ,EAAK,IACrCqH,EAAYmC,GAAOxJ,GACnBqH,EAAYmC,GACZxJ,IAGF0K,GAAU,EAAIa,EAAc/B,IAAU,GAAIxJ,GAAMmI,EAAOqB,GAAOxJ,IAC1DuJ,EAAIlC,EAAYmC,IAAU,GAAIxJ,GAC7BqH,EAAYmC,GAAM,+BACdnC,EAAYmC,IADE,eAEhBxJ,GAAM,IAKjBwL,IACGnE,EAAYxH,eACN2L,EAAWC,GAGtB,OAAOpE,EAGT,OAAe,SACbc,EACAoD,EACAlE,GAHa,OAKb8D,GACEG,GAAenD,EAAQoD,EAAelE,EAAYqE,MAAM,EAAGvD,EAAOtI,SAClEyL,GAAeC,EAAepD,EAAQd,EAAYqE,MAAM,EAAGvD,EAAOtI,WCvDtE,OAAe,SAACiB,GAAD,MAAsD,kBAAVA,GCgB3D,IChBA,GAAe,SAACA,GAAD,MAAuD,mBAAVA,G,SCkBpC6K,GAAM9M,EAAa8E,GACzC,IAIIiI,EAJEC,EAAanC,EAAM/F,GAAQ,CAACA,GAAQgG,EAAahG,GACjDmI,EACiB,GAArBD,EAAWhM,OAAchB,EAd7B,SAAiBA,EAAagN,GAI5B,IAHA,IAAMhM,EAASgM,EAAWH,MAAM,GAAI,GAAG7L,OACnC2J,EAAQ,EAELA,EAAQ3J,GACbhB,EAASoF,EAAYpF,GAAU2K,IAAU3K,EAAOgN,EAAWrC,MAG7D,OAAO3K,EAM6BkN,CAAQlN,EAAQgN,GAC9C7L,EAAM6L,EAAWA,EAAWhM,OAAS,GAGvCiM,UACKA,EAAY9L,GAGrB,IAAK,IAAIgM,EAAI,EAAGA,EAAIH,EAAWH,MAAM,GAAI,GAAG7L,OAAQmM,IAAK,CACvD,IAAIxC,GAAS,EACTyC,OAAS,EACPC,EAAeL,EAAWH,MAAM,IAAKM,EAAI,IACzCG,EAAqBD,EAAarM,OAAS,EAMjD,IAJImM,EAAI,IACNJ,EAAiB/M,KAGV2K,EAAQ0C,EAAarM,QAAQ,CACpC,IAAMuM,EAAOF,EAAa1C,GAC1ByC,EAAYA,EAAYA,EAAUG,GAAQvN,EAAOuN,GAG/CD,IAAuB3C,IACrBnE,EAAS4G,IAAc1G,EAAc0G,IACpClK,MAAMC,QAAQiK,KACZA,EAAU9M,QACT,SAACtC,GAAD,OACGwI,EAASxI,KAAU0I,EAAc1I,IAAUwP,GAAUxP,MACxDgD,UAEN+L,SAAwBA,EAAeQ,UAAevN,EAAOuN,IAG/DR,EAAiBK,GAIrB,OAAOpN,E,SCtDeyN,GACtBnC,EACAoC,GAEA,IAFqB,EAEfC,EAAwD,GAFzC,IAIFrC,GAJE,IAIrB,2BAAgC,KAArBrM,EAAqB,QACxBwK,EAAQ,EAAIiE,EAAYzO,GAE1BwK,IACDoB,EAAM5L,GAEF0O,EAAc1O,GAAQwK,EAAMzB,GAD7B0C,EAAIiD,EAAe1O,EAAMwK,EAAMzB,MATlB,8BAcrB,OAAO2F,ECnBT,OAAe,SAAC1J,GAAD,MACI,SAAjBA,EAAQtE,MCAV,GAAe,SAACsE,GAAD,OACbA,EAAQtE,OAAR,U7BWoB,S6BXpB,cCFF,GAAe,SAACsE,GAAD,MACI,UAAjBA,EAAQtE,MCIJiO,GAAqC,CACzC3L,OAAO,EACP0G,SAAS,GAGLkF,GAAc,CAAE5L,OAAO,EAAM0G,SAAS,GAE5C,GAAe,SAACmF,GACd,GAAI5K,MAAMC,QAAQ2K,GAAU,CAC1B,GAAIA,EAAQ9M,OAAS,EAAG,CACtB,IAAMsI,EAASwE,EACZxN,QAAO,SAACyN,GAAD,OAAYA,GAAUA,EAAOnE,UAAYmE,EAAOpC,YACvDqC,KAAI,SAACD,GAAD,OAAYA,EAAO9L,SAC1B,MAAO,CAAEA,MAAOqH,EAAQX,UAAWW,EAAOtI,QAG5C,OAAO8M,EAAQ,GAAGlE,UAAYkE,EAAQ,GAAGnC,SAErCmC,EAAQ,GAAGG,aAAe7I,EAAY0I,EAAQ,GAAGG,WAAWhM,OAC1DmD,EAAY0I,EAAQ,GAAG7L,QAA+B,KAArB6L,EAAQ,GAAG7L,MAC1C4L,GACA,CAAE5L,MAAO6L,EAAQ,GAAG7L,MAAO0G,SAAS,GACtCkF,GACFD,GAGN,OAAOA,IC/BT,GAAe,SACb3L,EADa,OAEXiM,EAFW,EAEXA,cAAeC,EAFJ,EAEIA,YAAaC,EAFjB,EAEiBA,WAFjB,OAIbF,EACc,KAAVjM,EACEoM,KACCpM,EACHkM,EACA,IAAI/J,KAAKnC,GACTmM,EACAA,EAAWnM,GACXA,GCTAqM,GAAkC,CACtC3F,SAAS,EACT1G,MAAO,MAGT,GAAe,SAAC6L,GAAD,OACb5K,MAAMC,QAAQ2K,GACVA,EAAQ3I,QACN,SAACoJ,EAAUR,GAAX,OACEA,GAAUA,EAAOnE,UAAYmE,EAAOpC,SAChC,CACEhD,SAAS,EACT1G,MAAO8L,EAAO9L,OAEhBsM,IACND,IAEFA,I,SCVkBE,GAAc/E,GACpC,GAAIA,GAASA,EAAMzB,GAAI,CACrB,IAAMF,EAAM2B,EAAMzB,GAAGF,IAErB,GAAIA,EAAI6D,SACN,OAGF,OAAI8C,GAAY3G,GACPA,EAAI4G,MAGTC,GAAa7G,GACR8G,GAAcnF,EAAMzB,GAAGwD,MAAMvJ,MAGlC4M,GAAiB/G,IC3BvBgG,ED4BkChG,EAAIgG,QC1BtC,YAAIA,GACDxN,QAAO,qBAAGwO,YACVd,KAAI,qBAAG/L,UD2BJ8M,EAAWjH,GACNkH,GAAiBvF,EAAMzB,GAAGwD,MAAMvJ,MAGlCgN,GACL7J,EAAY0C,EAAI7F,OAASwH,EAAMzB,GAAGF,IAAI7F,MAAQ6F,EAAI7F,MAClDwH,EAAMzB,ICtCG,IACb8F,ECCF,OAAe,SAA4BA,EAAaoB,GAAzC,OACbpB,GACAoB,IACCpB,EAAQjP,UACPiP,EAAQqB,KACRrB,EAAQsB,KACRtB,EAAQuB,WACRvB,EAAQwB,WACRxB,EAAQyB,SACRzB,EAAQ0B,WCXZ,GAAe,SAAC,GAoBf,IAnBCC,EAmBD,EAnBCA,SACAC,EAkBD,EAlBCA,WACAC,EAiBD,EAjBCA,UACA1F,EAgBD,EAhBCA,UACA2F,EAeD,EAfCA,mBACAC,EAcD,EAdCA,qBACAC,EAaD,EAbCA,YACAC,EAYD,EAZCA,YAaA,OADD,EAXCC,WAcYD,GAAeJ,IAChB1F,GAAa6F,IACbC,EAAcH,EAAqBH,IACpCK,IACCC,EAAcF,EAAuBH,IACvCI,IC5BX,GAAe,SAAC7N,GAAD,MACI,oBAAVA,GCIT,GAAe,SAACA,GAAD,OACbgO,GAAShO,IAAU,iBAAqBA,ICN1C,GAAe,SAACA,GAAD,OAAqCA,aAAiBiO,Q,SCI7CC,GACtBnL,EACA8C,GACiB,IAAjBnI,EAAiB,uDAAV,WAEP,GACE,GAAUqF,IACT9B,MAAMC,QAAQ6B,IAAWA,EAAO4G,MAAM,KACtC4B,GAAUxI,KAAYA,EAEvB,MAAO,CACLrF,OACA0K,QAAS,GAAUrF,GAAUA,EAAS,GACtC8C,OCbN,OAAe,SAACsI,GAAD,OACb5J,EAAS4J,KAAoBC,GAAQD,GACjCA,EACA,CACEnO,MAAOmO,EACP/F,QAAS,KCWjB,0CAAe,aAkBbD,GAlBa,qHAAAkG,EAAA,6DAEXtI,GACEF,EAHS,EAGTA,IACA0D,EAJS,EAITA,KACA3M,EALS,EAKTA,SACAwQ,EANS,EAMTA,UACAC,EAPS,EAOTA,UACAH,EARS,EAQTA,IACAC,EATS,EASTA,IACAG,EAVS,EAUTA,QACAC,EAXS,EAWTA,SACAvQ,EAZS,EAYTA,KACOsR,EAbE,EAaTtO,MACAiM,EAdS,EAcTA,cAdS,EAeT1E,MAfS,yCAqBJ,IArBI,UAuBPpK,EAA6B,GAC7BoR,EAAU7B,GAAa7G,GACvBiH,EAAapF,EAAgB7B,GAC7B2I,EAAoBD,GAAWzB,EAC/B2B,GACFxC,GAAiBO,GAAY3G,MAAUA,EAAI7F,OAC9B,KAAfsO,GACCrN,MAAMC,QAAQoN,KAAgBA,EAAWvP,OACtC2P,EAAoB,EAAaC,KACrC,KACA3R,EACAmL,EACAhL,GAEIyR,EAAmB,SACvBC,EACAC,EACAC,GAE0C,IAD1CC,EAC0C,uDADhCzL,EACV0L,EAA0C,uDAAhC1L,EAEJ6E,EAAUyG,EAAYC,EAAmBC,EAC/C5R,EAAMH,GAAK,eACTU,KAAMmR,EAAYG,EAAUC,EAC5B7G,UACAvC,OACG6I,EAAkBG,EAAYG,EAAUC,EAAS7G,MAKtDxL,MACG2R,IAAYzB,IAAe2B,GAAWvM,EAAkBoM,KACxD/C,GAAU+C,KAAgBA,GAC1BxB,IAAeC,GAAiBxD,GAAM7C,SACtC6H,IAAY5B,GAAcpD,GAAM7C,SA1DxB,sBA4DgB,GAAU9J,GACjC,CAAEoD,QAASpD,EAAUwL,QAASxL,GAC9BsS,GAAmBtS,GAFfoD,EA5DG,EA4DHA,MAAOoI,EA5DJ,EA4DIA,SAIXpI,EAhEO,oBAiET7C,EAAMH,GAAK,eACTU,KAAM6F,EACN6E,UACAvC,IAAK2I,GAAqBjF,GAAQ,IAAI,IAAM,GAAK1D,GAC9C6I,EAAkBnL,EAAiC6E,IAEnDD,EAvEI,0CAwEAhL,GAxEA,WA8ET+E,EAAkBgL,IAAShL,EAAkBiL,IAChC,KAAfmB,EA/EW,oBAmFLa,EAAYD,GAAmB/B,GAC/BiC,EAAYF,GAAmBhC,GAEhCjE,MAAMqF,IAUHe,EACHxJ,EAAyBqG,aAAe,IAAI/J,KAAKmM,GAChDN,GAASmB,EAAUnP,SACrB6O,EAAYQ,EAAY,IAAIlN,KAAKgN,EAAUnP,QAEzCgO,GAASoB,EAAUpP,SACrBsP,EAAYD,EAAY,IAAIlN,KAAKiN,EAAUpP,UAfvCuP,EACH1J,EAAyBoG,eAAiBuD,WAAWlB,GACnDpM,EAAkBiN,EAAUnP,SAC/B6O,EAAYU,EAAcJ,EAAUnP,OAEjCkC,EAAkBkN,EAAUpP,SAC/BsP,EAAYC,EAAcH,EAAUpP,SAapC6O,IAAaS,EA1GN,oBA2GTV,IACIC,EACFM,EAAU/G,QACVgH,EAAUhH,QACV7E,EACAA,GAEG4E,EAlHI,0CAmHAhL,GAnHA,YAwHT6Q,GAASM,IAAgBG,IAAYrB,IAAaC,EAxHzC,oBAyHLoC,EAAkBP,GAAmB9B,GACrCsC,EAAkBR,GAAmB7B,GACrC,GACHnL,EAAkBuN,EAAgBzP,QACnCsO,EAAWvP,OAAS0Q,EAAgBzP,MAChC,GACHkC,EAAkBwN,EAAgB1P,QACnCsO,EAAWvP,OAAS2Q,EAAgB1P,OAElC,IAAa,EAlIN,oBAmIT4O,EACE,EACAa,EAAgBrH,QAChBsH,EAAgBtH,SAEbD,EAxII,0CAyIAhL,GAzIA,YA8IT6Q,GAASM,KAAehB,GAAYmB,EA9I3B,sBA+I8BS,GAAmB5B,GAA7CqC,EA/IJ,EA+IH3P,MAAqB,EA/IlB,EA+IkBoI,SAEzBgG,GAAQuB,IAAkBrB,EAAW1S,MAAM+T,GAjJpC,oBAkJTxS,EAAMH,GAAK,eACTU,KAAM6F,EACN6E,QAAA,EACAvC,OACG6I,EAAkBnL,EAAgC,IAElD4E,EAxJI,0CAyJAhL,GAzJA,YA8JToQ,EA9JS,oBA+JLqC,EAAcpB,GAAqBjF,EAAOA,EAAK,GAAK1D,GAEtDgK,GAAWtC,GAjKJ,kCAkKYA,EAASe,GAlKrB,WAkKHvL,GAlKG,SAmKH+M,GAAgB5B,GAAiBnL,GAAQ6M,IAnKtC,oBAsKPzS,EAAMH,GAAK,+BACN8S,IACApB,EACDnL,EACAuM,GAAc1H,UAGbD,EA7KE,0CA8KEhL,GA9KF,oCAiLAoH,EAASgJ,GAjLT,iBAkLLwC,GAAmB,GAlLd,QAmL6B7R,OAAO8R,QAAQzC,GAnL5C,wEAmLGrO,GAnLH,MAmLQ+Q,GAnLR,MAoLFxL,EAAcsL,KAAsB5H,EApLlC,sEAwLsB8H,GAAiB3B,GAxLvC,QAwLD4B,GAxLC,QAyLD,GAAgBhC,GACpBgC,GACAN,EACA1Q,OAIA6Q,GAAmB,OAAH,wBACX,IACArB,EAAkBxP,GAAK,GAAckJ,UAGtCD,IACFhL,EAAMH,GAAQ+S,KAtMX,wCA2MJtL,EAAcsL,IA3MV,oBA4MP5S,EAAMH,GAAK,eACT6I,IAAK+J,GACFG,IAEA5H,EAhNE,0CAiNEhL,GAjNF,iCAuNNA,GAvNM,4CAAf,wDCjBA,GAAe,SACbgT,GADa,MAQT,CACJC,YAAaD,GAAQA,IAAS9M,EAC9BmK,SAAU2C,IAAS9M,EACnBoK,WAAY0C,IAAS9M,EACrB0K,QAASoC,IAAS9M,EAClBqK,UAAWyC,IAAS9M,IChBtB,GAAe,SAACrD,GAAD,OACbA,aAAiB4E,aCInB,GAAe,SAACiB,GAAD,OACb6G,GAAa7G,IAAQ6B,EAAgB7B,ICO1B,G,WAAb,iCACU,KAAAwK,UAAwB,G,uCAEhC,SAAIC,GACF/P,KAAK8P,UAAU5R,KAAK6R,K,yBAGtB,WAAW,UACc/P,KAAK8P,WADnB,IACT,2BAAuC,EACrCE,EADqC,YAD9B,8BAIThQ,KAAK8P,UAAY,O,KAIf,G,WAGJ,WAAoBG,EAAuBC,GAA0B,+BAAjD,KAAAD,WAFpB,KAAAE,QAAS,EAGPD,EAAaE,KAAI,kBAAO,EAAKD,QAAS,K,wCAGxC,SAAK1Q,GACEO,KAAKmQ,QACRnQ,KAAKiQ,SAAS1O,KAAK9B,O,KAKJ,G,WAGnB,iCACEO,KAAKqQ,UAAY,G,wCAGnB,SAAK5Q,GAAQ,UACYO,KAAKqQ,WADjB,IACX,2BAAuC,SAC5B9O,KAAK9B,IAFL,iC,uBAMb,SAAUwQ,GACR,IAAMC,EAAe,IAAI,GACnBI,EAAa,IAAI,GAAWL,EAAUC,GAG5C,OAFAlQ,KAAKqQ,UAAUnS,KAAKoS,GAEbJ,I,yBAGT,WACElQ,KAAKqQ,UAAY,O,KCsBfE,UAA2BnM,SAAWrB,E,SAE5BlI,KAY4B,6DAAF,GAAE,IAR1C+U,YAQ0C,MARnC9M,EAQmC,MAP1C0N,sBAO0C,MAPzB1N,EAOyB,EAN1C2N,EAM0C,EAN1CA,SACAC,EAK0C,EAL1CA,QAK0C,IAJ1CxG,qBAI0C,MAJ1B,GAI0B,MAH1CyG,wBAG0C,SAF1ChM,EAE0C,EAF1CA,iBACAiM,EAC0C,EAD1CA,aAEM9L,EAAY,SAAwB,IACpC+L,EAAiB,SAAqC,IAAIC,KAC1DnL,EAAsB,SAC1B,IAAI,IAEAoL,EAA2B,SAC/B,IAAID,KAEAE,EAAkB,SACtB,IAAI,IAMA/L,EAAuB,SAC3B,IAAI,IAKAgM,EAAuB,SAC3B,IAAI,IAMAC,EAA6B,SAAsC,IACnE/L,EAAwB,UAAa,GACrCgM,EAAiB,SAA8B,IAAIL,KACnDM,EAAe,UAAa,GAC5BC,EAA0B,SAE9B,IACIC,EAAiB,SACrB,IAEIzM,EACJ,SAA0CqF,GACtCqH,GAAgB,UAAa,GAC7BC,GAAa,SAAad,GAC1Be,GAAc,SAAahB,GAC3BzL,GAAqB,SAA8B,IAAI8L,KACvDY,GAAiBC,GAAmB/B,GACpCgC,GAA6BhB,IAAiB9N,EACpD,GAAqC,WAAwC,CAC3EiD,SAAS,EACTG,cAAc,EACdF,YAAa,GACbuH,aAAa,EACbsE,YAAa,EACb5L,cAAe,GACf6L,cAAc,EACdC,oBAAoB,EACpB5L,SAAUuL,GAAe7B,WACzBzJ,OAAQ,KAVV,qBAAO3C,GAAP,MAAkBoC,GAAlB,MAYMnC,GAAmB,SAA4B,CACnDqC,SAAUvC,EACVwC,aAAcxC,EACdyC,eAAgBzC,EAChB0C,cAAe1C,EACf2C,SAAU3C,EACV4C,QAAS5C,IAELkC,GAAe,SAAajC,IAElC+N,GAAWvP,QAAUyO,EACrBe,GAAYxP,QAAUwO,EAEtB,IAAMuB,GAAa,WAKjB,OAJAtM,GAAazD,QAAQkE,QACnBkD,GAAUiI,EAAerP,QAASoP,EAAwBpP,UAC1DiC,EAAcwB,GAAazD,QAAQmE,QAE9BV,GAAazD,QAAQkE,SAGxB8L,GAA0B,eAC9B,SACExV,EACAG,GAQmB,IAPnBsV,EAOmB,wDANnBC,EAMmB,uDAFf,GACJhM,EACmB,uCAAnBiM,EAAmB,uCAEbC,EAAgB,EAAI3M,GAAazD,QAAQmE,OAAQ3J,GAWvD,GATIG,GACF0N,GAAMgH,EAAerP,QAASxF,GAC9ByL,EAAIxC,GAAazD,QAAQmE,OAAQ3J,EAAMG,MAEtC,EAAIyU,EAAwBpP,QAASxF,IAASgV,GAAYxP,UACzDiG,EAAIoJ,EAAerP,QAASxF,GAAM,GACpC6N,GAAM5E,GAAazD,QAAQmE,OAAQ3J,KAIlCyV,GACCE,IACCxV,GAASyM,GAAUgJ,EAAezV,GAAO,GAAQyV,KACjDnO,EAAciO,IACdzO,GAAiBzB,QAAQkE,SACxBT,GAAazD,QAAQkE,WAClBsL,GAAYxP,UAAYkE,EAAU6L,SACxCrQ,EAAkBuQ,GACnB,CACA,IAAMI,EAAmB,OAAH,wBACjBH,GAAK,CACRhM,QAASsL,GAAYxP,UAAYkE,EAAU6L,KAC3C5L,OAAQV,GAAazD,QAAQmE,OAC7B3J,SAGFiJ,GAAazD,QAAO,+BACfyD,GAAazD,SACbqQ,GAGL3M,EAAoB1D,QAAQV,KAC1B6Q,EAAY,CAAE3V,QAAS6V,GAI3B3M,EAAoB1D,QAAQV,KAAK,CAC/B2E,cAAc,MAGlB,IAGIqM,GAAgB,eACpB,SACE9V,EACA+V,GAGwB,IAFxBlH,EAEwB,uDAFE,GAC1B4G,EACwB,uCAAxBO,EAAwB,uCAExBA,GAAkB3X,GAAS2B,GAC3B,IAAMwK,EAAQ,EAAInC,EAAU7C,QAASxF,GAErC,GAAIwK,EAAO,CACT,IAAMzB,EAAMyB,EAAgBzB,GAE5B,GAAIA,EAAI,CACN,IAAM/F,EACJ8E,GAASmO,GAAclN,EAAGF,MAAQ3D,EAAkB6Q,GAChD,GACAA,EAgCN,GA/BAhN,EAAG/F,MAAQgN,GAAgB+F,EAAUhN,GAEjC2G,GAAa3G,EAAGF,MACjBE,EAAGwD,MAAQ,IAAItK,SACd,SAACiU,GAAD,OACGA,EAASvL,QAAUuL,EAASlT,QAAUA,KAElCwM,GAAYzG,EAAGF,OAASmI,GAAShO,GAC1C+F,EAAGF,IAAI4G,MAAQzM,EACN4M,GAAiB7G,EAAGF,KAC7B,YAAIE,EAAGF,IAAIgG,SAAS5M,SAClB,SAACkU,GAAD,OACGA,EAAUtG,SAAY7M,EAAmB+G,SACxCoM,EAAUnT,UAGP0H,EAAgB3B,EAAGF,MAAQE,EAAGwD,KACvCxD,EAAGwD,KAAKxK,OAAS,EACbgH,EAAGwD,KAAKtK,SACN,SAACmU,GAAD,OACGA,EAAYzL,QAAU1G,MAAMC,QAAQlB,KAC9BA,EAAa0E,MACd,SAAC3I,GAAD,OAAkBA,IAASqX,EAAYpT,SAEzCA,IAAUoT,EAAYpT,SAE7B+F,EAAGwD,KAAK,GAAG5B,UAAY3H,EAE5B+F,EAAGF,IAAI7F,MAAQA,EAGbyS,EAAc,CAChB,IAAMpL,EAASmC,GAAgBnE,GAC/BoD,EAAIpB,EAAQrK,EAAM+V,GAClBvN,EAAqBhD,QAAQV,KAAK,CAChCuF,OAAQ,+BACHjC,EAAiB5C,SACjB6E,GAELrK,SAIJ6O,EAAQwH,aAAeC,GAAuBtW,EAAMgD,GACpD6L,EAAQ0H,gBAAkBC,GAAQxW,QAElCwK,EAAMzB,GAAK,CACTF,IAAK,CACH7I,OACAgD,MAAO+S,GAET/S,MAAO+S,MAKf,IAGIU,GAAyB,eAAkB,SAACzW,EAAMjB,GACtD,IAAM2X,EAAalK,GAAgBnE,GAInC,OAFArI,GAAQjB,GAAQ0M,EAAIiL,EAAY1W,EAAMjB,IAE9B6N,GAAU8J,EAAYtO,EAAiB5C,WAC9C,IAEG8Q,GAAyB,eAC7B,SACEtW,EACAsR,GACmB,IAAnBmE,IAAmB,yDAInB,GACExO,GAAiBzB,QAAQ8D,SACzBrC,GAAiBzB,QAAQ+D,YACzB,CACA,IAAMoN,GAAgB/J,GACpB,EAAIxE,EAAiB5C,QAASxF,GAC9BsR,GAEIsF,EAAoB,EAAI3N,GAAazD,QAAQ+D,YAAavJ,GAC1D6W,EAAkB5N,GAAazD,QAAQ8D,QAE7CqN,EACIlL,EAAIxC,GAAazD,QAAQ+D,YAAavJ,GAAM,GAC5C6N,GAAM5E,GAAazD,QAAQ+D,YAAavJ,GAE5CiJ,GAAazD,QAAQ8D,QAAUmN,KAE/B,IAAMf,EAAQ,CACZpM,QAASL,GAAazD,QAAQ8D,QAC9BC,YAAaN,GAAazD,QAAQ+D,YAClCvJ,QAGI8W,EACH7P,GAAiBzB,QAAQ8D,SACxBuN,IAAoBnB,EAAMpM,SAC3BrC,GAAiBzB,QAAQ+D,aACxBqN,IAAsB,EAAI3N,GAAazD,QAAQ+D,YAAavJ,GAIhE,OAFA8W,GAAarB,GAAgBvM,EAAoB1D,QAAQV,KAAK4Q,GAEvDoB,EAAYpB,EAAQ,GAG7B,MAAO,KAET,IAGIqB,GAAoB,qDACxB,WACE/W,EACAgX,GAFF,eAAA3F,EAAA,sEAKU4F,GACJ,EAAI5O,EAAU7C,QAASxF,GACvBmV,IAPN,mBASInV,EALIG,EAJR,aAWEqV,GAAwBxV,EAAMG,EAAO6W,GAXvC,kBAaS7Q,EAAYhG,IAbrB,2CADwB,wDAgBxB,CAACgV,KAGG+B,GAAoC,qDACxC,WACE5R,GADF,uCAAA+L,EAAA,6DAEE8F,EAFF,+BAE4C,GAF5C,SAI2BnC,GAAYxP,QACnCgH,GAAgBnE,GAChB0M,GAAWvP,QACX,CACE2O,eACA7O,MAAO6R,EACPhL,OAAQqC,GAAU4F,EAAe5O,QAAS6C,EAAU7C,WAV1D,gBAIUmE,EAJV,EAIUA,OAJV,IAcqBrE,GAdrB,IAcE,2BAAW,EAAe,SAClB,EAAQ,EAAIqE,EAAQ,IAEtB8B,EAAIxC,GAAazD,QAAQmE,OAAQ,EAAM,GACvCkE,GAAM5E,GAAazD,QAAQmE,OAAQ,GAlB3C,uDAqBSA,GArBT,2CADwC,sDAwBxC,CAACwK,IAGGiD,GAAY,uCAAG,WAAO/O,GAAP,yBAAAgJ,EAAA,sDACf3H,GAAU,EADK,OAAA2H,EAAA,KAGAhJ,GAHA,iDAGR,EAHQ,aAIXmC,EAAQnC,EAAU,IAJP,oBAOTU,EAAKyB,EAAMzB,GACXvD,EAAUqB,EAAK2D,EAAO,OAExBzB,EAVW,kCAWYkO,GACvBzM,EACA2K,IAbW,SAWPkC,EAXO,QAgBEtO,EAAG/I,OAChB0J,GAAU,EACV+B,EAAIxC,GAAazD,QAAQmE,OAAQZ,EAAG/I,KAAMqX,EAAWtO,EAAG/I,OACxD6N,GAAMgH,EAAerP,QAASuD,EAAG/I,OACxB,EAAI4U,EAAwBpP,QAASuD,EAAG/I,QACjDyL,EAAIoJ,EAAerP,QAASuD,EAAG/I,MAAM,GACrC6N,GAAM5E,GAAazD,QAAQmE,OAAQZ,EAAG/I,OAtB3B,gBA0BfwF,GA1Be,uCA0BG4R,GAAa5R,GA1BhB,wDA8BZkE,GA9BY,4CAAH,sDAiCZ8M,GAAwC,qDAC5C,WAAOxW,GAAP,mBAAAqR,EAAA,yDACQlF,EAAShG,EAAYnG,GACvBkB,OAAOD,KAAKoH,EAAU7C,SACrBsE,EAAsB9J,GAEvBsX,EAA+C,GAEnDpO,EAAoB1D,QAAQV,KAAK,CAC/B2E,cAAc,KAGZuL,GAAYxP,QAXlB,iCAYyB0R,GACnB/K,EACAhG,EAAYnG,QAAQ0D,EAAayI,GAdvC,OAYImL,EAZJ,OAgBI5N,EAAUyC,EAAOQ,OAAM,SAAC3M,GAAD,OAAW,EAAIsX,EAActX,MAhBxD,4BAkBcmG,EAAYnG,GAlB1B,kCAmBcoX,GAAa/O,EAAU7C,SAnBrC,6DAqBgBtC,QAAQqU,IACZpL,EACG9K,QAAO,SAACmW,GAAD,OAAe,EAAInP,EAAU7C,QAASgS,MAC7CzI,IAFH,uCAGI,WAAOyI,GAAP,SAAAnG,EAAA,sEACQ0F,GAAkBS,EAAW,MADrC,mFAHJ,wDAtBZ,oBA6BU7K,MAAMjH,SA7BhB,QAkBIgE,EAlBJ,oBAgCER,EAAoB1D,QAAQV,KAAI,+BAC1BkM,GAAShR,GAAQ,CAAEA,QAAS,IAAE,CAClC2J,OAAQV,GAAazD,QAAQmE,OAC7BF,cAAc,EACdC,QAASsL,GAAYxP,QACjBiC,EAAc6P,GACd/B,QAtCR,kBAyCS7L,GAzCT,4CAD4C,sDA4C5C,CAACwN,GAAmCH,KAGhCU,GAAoB,eACxB,SACEzX,EACAgD,EAGA6L,GALF,OAOE3N,OAAO8R,QAAQhQ,GAAOf,SAAQ,YAAuB,uBAArByV,EAAqB,KAAXpG,EAAW,KAC7CkG,EAAY,GAAH,OAAMxX,EAAN,YAAc0X,GACvBlN,EAAQ,EAAInC,EAAU7C,QAASgS,GAChBjP,GAAmB/C,QAAQmS,IAAI3X,KAEnCgN,GAAYsE,IAAgB9G,IAAUA,EAAMzB,GACzD0O,GACED,EACAlG,EACAzC,GAEFiH,GACE0B,EACAlG,EACAzC,GACA,GACCrE,QAGX,CAACgM,KAGGoB,GAAiB,SAAC5X,GAAD,OACrB8U,GAActP,SACdkP,EAAelP,QAAQmS,IAAI3X,IAC3B0U,EAAelP,QAAQmS,KAAK3X,EAAKpB,MAAM,QAAU,IAAI,KAEjDiZ,GAAsB,SAC1B7X,EACA6O,EACAhG,EACAiP,GAEA,IAAMtN,EAAQ,EAAInC,EAAU7C,QAASxF,GAC/B8F,EAAeK,EAAYqE,EAAMzB,GAAG/F,OACtC,EAAIoF,EAAiB5C,QAASxF,GAC9BwK,EAAMzB,GAAG/F,MA6Bb,OA3BIwH,IAAUrE,EAAYL,KACpB+C,GAAQA,EAAyBkP,eACnCvN,EAAMzB,GAAG/F,MAAQuM,GAAc/E,GACrB,EAAmBjC,GAAmB/C,QAASxF,GAGzDwK,EAAMzB,GAAG/F,MAAQ8C,EAFjBgQ,GAAc9V,EAAM8F,MAOpBK,EAAYL,IAAiBgS,IAC/BE,GAAcnJ,EAASrE,EAAMzB,GAAGwB,SAC/B0K,GAAe7B,YAChB5I,GACAvD,GAAiBzB,QAAQkE,SAEzBuN,GAAczM,EAAO2K,IAA4BhS,MAAK,SAAChD,GACrDsH,EAActH,GACVsL,EAAIoJ,EAAerP,QAASxF,GAAM,GAClC6N,GAAMgH,EAAerP,QAASxF,GAElCiJ,GAAazD,QAAQkE,UAAY6L,MAC/BnM,GAAgB,OAAD,wBAAMH,GAAazD,SAAO,CAAEkE,QAAS6L,WAInDzP,GAGHmS,GAA0C,SAC9CjY,EACAgD,GACY,IAAZ6L,EAAY,uDAAF,GAEJrE,EAAQ,EAAInC,EAAU7C,QAASxF,GAC/B8I,EAAeP,GAAmB/C,QAAQmS,IAAI3X,GAEhD8I,IACF0L,EAAqBhP,QAAQV,KAAK,CAChCqH,OAAQnJ,EACRhD,OACAkY,SAAS,KAIRjR,GAAiBzB,QAAQ8D,SACxBrC,GAAiBzB,QAAQ+D,cAC3BsF,EAAQwH,cAER5K,EACExC,GAAazD,QAAQ+D,YACrBvJ,EACAmY,GACEnV,EACA,EAAIoF,EAAiB5C,QAASxF,EAAM,IACpC,EAAIiJ,GAAazD,QAAQ+D,YAAavJ,EAAM,MAIhDkJ,EAAoB1D,QAAQV,KAAK,CAC/B9E,OACAuJ,YAAaN,GAAazD,QAAQ+D,YAClCD,QAASmN,GAAWzW,EAAMgD,OAI5BA,EAAajB,QACb0J,EAAIpD,EAAU7C,QAASxF,EAAM,KAC7ByL,EAAIgJ,EAA2BjP,QAASxF,EAAM,MAGhDwK,IAAUA,EAAMzB,IAAOD,KAAkB5D,EAAkBlC,GACzDyU,GAAkBzX,EAAMgD,EAAO8F,EAAe,GAAK+F,GACnDiH,GAAc9V,EAAMgD,EAAO6L,GAAS,GAAOrE,GAE/CoN,GAAe5X,IAASkJ,EAAoB1D,QAAQV,KAAK,IACzDyP,EAAgB/O,QAAQV,KAAK,CAAE9E,OAAM0W,WAAY0B,QAG7CC,GAA8B,qDAClC,yEAAAhH,EAAA,yDAAS3Q,EAAT,EAASA,KAAMkB,EAAf,EAAeA,OAAf,IAAuBA,OAAUoB,EAAjC,EAAiCA,MAAasV,EAA9C,EAAwC5X,KAClCV,EAAQ4B,EAAgB5B,OAGtBwK,EAAQ,EAAInC,EAAU7C,QAASxF,IAJvC,oBAOQsR,EAAagH,EAAY/I,GAAc/E,QAAS9G,EACpD4N,EAAanL,EAAYmL,GAActO,EAAQsO,EAEzCT,EAAcnQ,IAAS0F,EAVjC,EAcQ8O,GAAmBnB,GAFXpD,EAZhB,EAYMH,SACYI,EAblB,EAaMH,WAGI8H,GACFP,GAAcxN,EAAMzB,GAAIyB,EAAMzB,GAAGwB,SAChCyK,GAAYxP,UACZ,EAAIyD,GAAazD,QAAQmE,OAAQ3J,IACpCwY,GAAe,OAAD,QACZ3H,cACA7F,YAAa,EAAI/B,GAAazD,QAAQgE,cAAexJ,GACrD8Q,YAAa7H,GAAazD,QAAQsL,YAClCH,qBACAC,wBACGqE,KAEDU,GACH9E,GAAe+G,GAAe5X,GAE5BmG,EAAYmL,KACf9G,EAAMzB,GAAG/F,MAAQsO,GAGboE,EAAQY,GAAuBtW,EAAMwK,EAAMzB,GAAG/F,OAAO,GAEvD6N,IAAgB,EAAI5H,GAAazD,QAAQgE,cAAexJ,KAC1DyL,EAAIxC,GAAazD,QAAQgE,cAAexJ,GAAM,GAC9CiH,GAAiBzB,QAAQgE,gBACtBkM,EAAMlM,cAAgBP,GAAazD,QAAQgE,gBAG5CiM,GAAgBhO,EAAciO,IAAUC,GAExC4C,EA7CR,wBA8CO1H,GACC0D,EAAgB/O,QAAQV,KAAK,CAC3B9E,OACAU,OACAgW,WAAY0B,OAlDtB,kBAqDQ3C,GACAvM,EAAoB1D,QAAQV,KAC1B6Q,EAAY,CAAE3V,QAAM,+BAAQ0V,GAAK,CAAE1V,WAvD7C,WA4DIkJ,EAAoB1D,QAAQV,KAAK,CAC/B2E,cAAc,KAGZuL,GAAYxP,QAhEpB,kCAiE+BwP,GAAYxP,QACnCgH,GAAgBnE,GAChB0M,GAAWvP,QACX,CACE2O,eACAhI,OAAQqC,GAAU,CAACxO,GAAOqI,EAAU7C,SACpCF,MAAO,CAACtF,KAvElB,iBAiEc2J,EAjEd,EAiEcA,OASF8O,EAAsBxP,GAAazD,QAAQkE,QACjDvJ,EAAQ,EAAIwJ,EAAQ3J,GAEhB0K,EAAgB9I,KAAmBzB,IAC/BuY,EAAiBjT,EAAkBzF,IACnC2Y,EAAe,EAAIhP,EAAQ+O,EAAgB,KACpChY,MAAQiY,EAAavN,UAAYjL,EAAQwY,IAGpDA,GACA,EAAI1P,GAAazD,QAAQmE,OAAQ+O,MAEjC1Y,EAAO0Y,IAIXhP,EAAUjC,EAAckC,GAExB8O,IAAwB/O,IAAY+L,GAAe,GA5FzD,yCA8FqBwB,GAAczM,EAAO2K,IA9F1C,aA+FQnV,EADFG,EA9FN,sBAmGK0Q,GACC0D,EAAgB/O,QAAQV,KAAK,CAC3B9E,OACAU,OACAgW,WAAY0B,OAEhB5C,GACExV,EACAG,EACAsV,EACAC,EACAhM,EACAiM,GA/GN,4CADkC,sDAoHlC,IAGIyC,GAA4C,SAChDQ,GAIA,IAAMvO,EAAS,OAAH,wBACPjC,EAAiB5C,SACjBgH,GAAgBnE,IAGrB,OAAOlC,EAAYyS,GACfvO,EACA2G,GAAS4H,GACT,EAAIvO,EAAQuO,GACZA,EAAW7J,KAAI,SAAC/O,GAAD,OAAU,EAAIqK,EAAQrK,OAGrC6Y,GAAgB,oCACpB,8CAAAxH,EAAA,yDAAOhH,EAAP,+BAAgB,GACRyO,EAAkB7P,GAAazD,QAAQkE,SAEzCsK,EAHN,iCAI6BgB,GAAYxP,QAAQ,+BAEtCgH,GAAgBnE,IAChBgC,GAEL0K,GAAWvP,QACX,CACE2O,eACAhI,OAAQqC,GAAU4F,EAAe5O,QAAS6C,EAAU7C,WAZ5D,gBAIYmE,EAJZ,EAIYA,OAWRV,GAAazD,QAAQkE,QAAUjC,EAAckC,GAfjD,wBAiBI4L,KAjBJ,QAoBEuD,IAAoB7P,GAAazD,QAAQkE,SACvCR,EAAoB1D,QAAQV,KAAK,CAC/B4E,QAAST,GAAazD,QAAQkE,UAtBpC,4CAyBA,CAACyK,IAGG4E,GAAgD,SAAC/Y,GACrDA,EACI8J,EAAsB9J,GAAMiC,SAAQ,SAAC+W,GAAD,OAClCnL,GAAM5E,GAAazD,QAAQmE,OAAQqP,MAEpC/P,GAAazD,QAAQmE,OAAS,GAEnCT,EAAoB1D,QAAQV,KAAK,CAC/B6E,OAAQV,GAAazD,QAAQmE,UAI3BsP,GAA0C,SAACjZ,EAAMG,EAAO0O,GAC5D,IAAMhG,IACF,EAAIR,EAAU7C,QAASxF,IAAmB,CAAE+I,GAAI,KAAMA,IAAM,IAC9DF,IAEF4C,EAAIxC,GAAazD,QAAQmE,OAAQ3J,EAAI,+BAChCG,GAAK,CACR0I,SAGFK,EAAoB1D,QAAQV,KAAK,CAC/B9E,OACA2J,OAAQV,GAAazD,QAAQmE,OAC7BD,SAAS,IAGXmF,GAAWA,EAAQqK,aAAerQ,GAAOA,EAAIyD,OAASzD,EAAIyD,SAGtD6M,GAA6C,eACjD,SAACP,EAAY9S,EAAcsT,EAAU1C,GACnC,IAAM2C,EAAepV,MAAMC,QAAQ0U,GAC7BU,EAAc5C,IAEhB/B,EAAanP,Q,+BAER4C,EAAiB5C,SACjBgH,GAAgBnE,IAErBlC,EAAYL,GACZsC,EAAiB5C,QACjB6T,EACAvT,EADY,eAET8S,EAAkC9S,IAEzC,GAAIK,EAAYyS,GAEd,OADAQ,IAAatE,GAActP,SAAU,GAC9B8T,EAGT,IApB6C,EAoBvCvT,EAAS,GApB8B,IAsBrB+D,EAAsB8O,IAtBD,IAsB7C,2BAA2D,KAAhDpB,EAAgD,QACzD4B,GAAY1E,EAAelP,QAAQmO,IAAI6D,GACvCzR,EAAOtE,KAAK,EAAI6X,EAAa9B,KAxBc,8BA2B7C,OAAO6B,EAAetT,EAASA,EAAO,KAExC,IAGIxH,GAAoC,SACxCiZ,EAIA1R,GALwC,OAOxC+M,GAAW2E,GACPjD,EAAgB/O,QAAQqE,UAAU,CAChC/E,KAAM,SAAC/B,GAAD,OACJyU,EACE2B,QACEzV,EACAoC,GAEF/C,MAGNoW,GACE3B,EACA1R,GACA,IAGFwC,GAA8C,SAACtI,GAAkB,MAAZ6O,EAAY,uDAAF,GAAE,IAC7C7O,EACpB8J,EAAsB9J,GACtBkB,OAAOD,KAAKmT,EAAe5O,UAHsC,IACrE,2BAEyC,KAF9BwT,EAE8B,QACvC5E,EAAe5O,QAAQ+T,OAAOP,GAC9BzQ,GAAmB/C,QAAQ+T,OAAOP,GAE9B,EAAI3Q,EAAU7C,QAASwT,KACpBnK,EAAQ2K,cACX3L,GAAM+G,EAAwBpP,QAASwT,GACvCnL,GAAMgH,EAAerP,QAASwT,KAE/BnK,EAAQ4K,WAAa5L,GAAM5E,GAAazD,QAAQmE,OAAQqP,IACxDnK,EAAQ6K,WAAa7L,GAAMxF,EAAU7C,QAASwT,IAC9CnK,EAAQ8K,WACP9L,GAAM5E,GAAazD,QAAQ+D,YAAayP,IACzCnK,EAAQ+K,aACP/L,GAAM5E,GAAazD,QAAQgE,cAAewP,IAC3C9Q,IACE2G,EAAQgL,kBACThM,GAAMzF,EAAiB5C,QAASwT,GAElCzE,EAAgB/O,QAAQV,KAAK,CAC3B9E,KAAMgZ,EACNtC,WAAY0B,SAxBmD,8BA6BrElP,EAAoB1D,QAAQV,KAAI,6CAC3BmE,GAAazD,SACXqJ,EAAQ8K,UAAiB,CAAErQ,QAASmN,MAAhB,IACrBzB,GAAYxP,QAAU,GAAK,CAAEkE,QAAS6L,SAE3C1G,EAAQ2K,aAAeX,MAGpBiB,GAAmB,SACvB9Z,EACA6I,EACAgG,GAEAxQ,GAAS2B,EAAiC6O,GAC1C,IAAIrE,EAAQ,EAAInC,EAAU7C,QAASxF,GAE7BwR,EAAoBuI,GAA0BlR,GAEpD,KACEA,IAAQ2B,EAAMzB,GAAGF,KAChBf,GAASmO,GAAczL,EAAMzB,GAAGF,OAASoN,GAAcpN,IACvD2I,GACCvN,MAAMC,QAAQsG,EAAMzB,GAAGwD,OACvBvG,EAAQwE,EAAMzB,GAAGwD,MAAM7E,MAAK,SAACoH,GAAD,OAAYA,IAAWjG,MALvD,CAUA2B,EAAQ,CACNzB,GAAIyI,E,+BAEKhH,EAAMzB,IAAE,CACXwD,KAAM,GAAF,mBACCvG,EAAQwE,EAAMzB,GAAGwD,MAAQ,IAAIlL,QAC9B,SAACwH,GAAD,OAASoN,GAAcpN,IAAQhB,SAASmS,SAASnR,OAFjD,CAIFA,IAEFA,IAAK,CAAEnI,KAAMmI,EAAInI,KAAMV,UAAM,+BAG1BwK,EAAMzB,IAAE,CACXF,SAIR4C,EAAIpD,EAAU7C,QAASxF,EAAMwK,GAE7B,IAAM1E,EAAe+R,GAAoB7X,EAAM6O,EAAShG,GAAK,IAG3D2I,GAAqBvN,MAAMC,QAAQ4B,IAC9B8G,GAAU,EAAIvE,EAAU7C,QAASxF,GAAM+I,GAAG/F,MAAO8C,GAClDK,EAAY,EAAIkC,EAAU7C,QAASxF,GAAM+I,GAAG/F,UAEhD,EAAIqF,EAAU7C,QAASxF,GAAM+I,GAAG/F,MAAQuM,GACtC,EAAIlH,EAAU7C,QAASxF,OAKvB3B,GAA0C,eAC9C,SAAC2B,EAAM6O,GACL,IAAMoL,GAAqB,EAAI5R,EAAU7C,QAASxF,GAoBlD,OAlBAyL,EAAIpD,EAAU7C,QAASxF,EAAM,CAC3B+I,GAAI,OAAF,sCACIkR,EACA,CAAEpR,IAAK,CAAE7I,S,eAEP6I,KAAM,EAAIR,EAAU7C,QAASxF,GAAM+I,IAAM,IAAIF,KAAO,IACjD,EAAIR,EAAU7C,QAASxF,GAAM+I,KACjC,CACL/I,OACAuK,OAAO,IACJsE,KAGPmJ,GAAcnJ,GAAS,IACrBpD,EAAImJ,EAAwBpP,QAASxF,GAAM,GAC7CoU,EAAe5O,QAAQmO,IAAI3T,GAC3Bia,GAAqBpC,GAAoB7X,EAAM6O,GAExCiF,GACF,CAAE9T,KAAMA,GACT,CACEA,OACA2I,SAAU0P,GACVzP,OAAQyP,GACRxP,IAAK,SAAF,oGAAE,WAACA,GACJ,GAAIA,EACFiR,GAAiB9Z,EAAM6I,EAAKgG,OACvB,CACL,IAAMrE,EAAQ,EAAInC,EAAU7C,QAASxF,GAC/ByI,EACJP,GAAqB2G,GAAWA,EAAQ3G,iBAC1CsC,IAAUA,EAAMzB,GAAGwB,OAAQ,GAGzBzC,IACC,EAAmBS,GAAmB/C,QAASxF,GAC5CyI,IAAkBC,EAAsBlD,QACxCiD,IAEJ6L,EAAyB9O,QAAQmO,IAAI3T,UAMnD,CAACoI,EAAiB5C,UAGdlH,GAAkD,eACtD,SAAC4b,EAASC,GAAV,8CAAwB,WAAO5V,GAAP,uBAAA8M,EAAA,yDAClB9M,IACFA,EAAE6V,gBAAkB7V,EAAE6V,iBACtB7V,EAAE8V,SAAW9V,EAAE8V,WAEbC,GAAoB,EACpBhB,EAAc9M,GAAgBnE,GAElCa,EAAoB1D,QAAQV,KAAK,CAC/BuQ,cAAc,IATM,UAahBL,GAAYxP,QAbI,iCAcewP,GAAYxP,QAC3C8T,EACAvE,GAAWvP,QACX,CACE2O,eACAhI,OAAQqC,GAAU4F,EAAe5O,QAAS6C,EAAU7C,WAnBtC,gBAcVmE,EAdU,EAcVA,OAAQU,EAdE,EAcFA,OAQhBpB,GAAazD,QAAQmE,OAASA,EAC9B2P,EAAcjP,EAvBI,yCAyBZ+M,GAAa/O,EAAU7C,SAzBX,YA6BlBiC,EAAcwB,GAAazD,QAAQmE,UACnCzI,OAAOD,KAAKgI,GAAazD,QAAQmE,QAAQgD,OAAM,SAAC3M,GAAD,OAC7C,EAAIsZ,EAAatZ,MA/BD,wBAkClBkJ,EAAoB1D,QAAQV,KAAK,CAC/B6E,OAAQ,GACR0L,cAAc,IApCE,UAsCZ6E,EAAQZ,EAAa/U,GAtCT,wCAwClB4V,GAxCkB,uCAwCEA,EAAUlR,GAAazD,QAAQmE,OAAQpF,GAxCzC,QAyClB2P,GACE,GACE7L,EAAU7C,SACV,SAACtD,GAAD,OAAiB,EAAI+G,GAAazD,QAAQmE,OAAQzH,KAClDkS,EAAe5O,SA7CD,0DAiDpB8U,GAAoB,EAjDA,yBAmDpBrR,GAAazD,QAAQsL,aAAc,EACnC5H,EAAoB1D,QAAQV,KAAK,CAC/BgM,aAAa,EACbuE,cAAc,EACdC,mBACE7N,EAAcwB,GAAazD,QAAQmE,SAAW2Q,EAChDlF,YAAanM,GAAazD,QAAQ4P,YAAc,EAChDzL,OAAQV,GAAazD,QAAQmE,SA1DX,6EAAxB,wDA8DA,CAACuK,EAAkBiB,GAA4BhB,IAG3CoG,GAAiB,eACrB,WAUElQ,GAAoC,IARlCmQ,EAQkC,EARlCA,WACAb,EAOkC,EAPlCA,UACAc,EAMkC,EANlCA,gBACAb,EAKkC,EALlCA,YACAc,EAIkC,EAJlCA,kBACAlB,EAGkC,EAHlCA,YACAmB,EAEkC,EAFlCA,gBAIGnB,IACH3E,EAAerP,QAAU,GACzBoP,EAAwBpP,QAAU,IAGpCkP,EAAelP,QAAU,IAAI6O,IAC7BS,GAActP,SAAU,EAExB0D,EAAoB1D,QAAQV,KAAK,CAC/BsQ,YAAauF,EAAkB1R,GAAazD,QAAQ4P,YAAc,EAClE9L,QAASqQ,EACL1Q,GAAazD,QAAQ8D,UACrBoR,GACA9N,GAAUvC,EAAQjC,EAAiB5C,SAEvCsL,cAAa2J,GAAkBxR,GAAazD,QAAQsL,YACpDpH,QAAS8P,EACLvQ,GAAazD,QAAQkE,UACnBmP,GAAcxO,GACpBd,YAAaoQ,EAAY1Q,GAAazD,QAAQ+D,YAAc,GAC5DC,cAAeoQ,EAAc3Q,GAAazD,QAAQgE,cAAgB,GAClEG,OAAQ6Q,EAAavR,GAAazD,QAAQmE,OAAS,GACnD0L,cAAc,EACdC,oBAAoB,MAGxB,IAGIsF,GAAuB,SAAvBA,EACJ5X,GACS,IAAThD,EAAS,uDAAF,GAEDwK,EAAQ,EAAInC,EAAU7C,QAASxF,GAarC,IAXCwK,IACEwC,GAAYhK,IACV8E,IAAU9E,aAAiB6X,MAAQ7X,aAAiBmC,QACvDsG,EAAIpD,EAAU7C,QAASxF,EAAM,CAC3B+I,GAAI,CACFF,IAAK,CAAE7I,OAAMgD,SACbA,QACAhD,YAIFwK,GAASA,EAAMzB,IAAMyB,EAAMzB,GAAGwD,QAI9BtI,MAAMC,QAAQlB,IAAUuE,EAASvE,IAKnC,IAAK,IAAMd,KAJPlC,IAAS,EAAIqI,EAAU7C,QAASxF,IAClCyL,EAAIpD,EAAU7C,QAASxF,EAAMiE,MAAMC,QAAQlB,GAAS,GAAK,IAGzCA,EAChB4X,EAAqB5X,EAAMd,GAAMlC,GAAQA,EAAO,IAAM,IAAMkC,IAK5D1D,GAAoC,SAAC6L,GAA6B,IAArByQ,EAAqB,uDAAF,GAC9DC,EAAgB1Q,GAAUjC,EAAiB5C,QAEjD,GAAIsC,IAAUgT,EAAiBE,WAAY,WACtB5G,EAAe5O,SADO,IACzC,2BAA2C,KAAhC,EAAgC,QACnCgF,EAAQ,EAAInC,EAAU7C,QAAS,GACrC,GAAIgF,GAASA,EAAMzB,GAAI,CACrB,IAAMkS,EAAWhX,MAAMC,QAAQsG,EAAMzB,GAAGwD,MACpC/B,EAAMzB,GAAGwD,KAAK,GACd/B,EAAMzB,GAAGF,IAEb,IACEoN,GAAcgF,IAAaA,EAASC,QAAQ,QAAS1c,QACrD,MACA,aAXmC,gCAgB1Csc,EAAiBJ,oBACftS,EAAiB5C,QAAO,iBAAQuV,IAE9BD,EAAiBE,aACpB3S,EAAU7C,QAAU,GAEpBgD,EAAqBhD,QAAQV,KAAK,CAChCuF,OAAQ,OAAF,UAAO0Q,KAGfxG,EAAgB/O,QAAQV,KAAK,CAC3B4R,WAAY,OAAF,UAAOqE,KAGnBvG,EAAqBhP,QAAQV,KAAK,CAChCqH,OAAQ,OAAF,UAAO4O,GACb7C,SAAS,MAIZ4C,EAAiBJ,mBAChBE,GAAqB,OAAD,UAAMG,IAE5BR,GAAeO,EAAkBzQ,IAG7B8Q,GAA0C,SAACnb,GAAD,OAC9C,EAAIqI,EAAU7C,QAASxF,GAAM+I,GAAGF,IAAIyD,SAsDtC,OApDA,aAAgB,WACdsO,GAAqBxS,EAAiB5C,SACtC,IAAMoE,EAAwBV,EAAoB1D,QAAQqE,UAAU,CAClE/E,KADkE,SAC7DkC,GACCgD,EAAsBhD,EAAWC,GAAiBzB,SAAS,KAC7DyD,GAAazD,QAAO,+BACfyD,GAAazD,SACbwB,GAELoC,GAAgBH,GAAazD,aAK7B4V,EAA4B5G,EAAqBhP,QAAQqE,UAAU,CACvE/E,KADuE,SAClE4Q,GACH,GAAIA,EAAMvJ,QAAUuJ,EAAM1V,MAAQiH,GAAiBzB,QAAQkE,QAAS,CAClE,IAAMW,EAASmC,GAAgBnE,GAC/BoD,EAAIpB,EAAQqL,EAAM1V,KAAM0V,EAAMvJ,QAC9B0M,GAAcxO,OAOpB,OAFA2K,GAAYxP,SAAWyB,GAAiBzB,QAAQkE,SAAWmP,KAEpD,WACLtE,EAAgB/O,QAAQyE,cACxBL,EAAsBK,cACtBmR,EAA0BnR,iBAE3B,IAEH,aAAgB,WACd,IAAMoR,EAAc,SAACxS,GAAD,OACjBoN,GAAcpN,KAAShB,SAASmS,SAASnR,IAE5C8L,EAAanP,SAAU,EAJT,UAMK8O,EAAyB9O,SAN9B,IAMd,2BAAqD,KAA1C,EAA0C,QAC7CgF,EAAQ,EAAInC,EAAU7C,QAAS,GAErCgF,IACGA,EAAMzB,GAAGwD,KACN/B,EAAMzB,GAAGwD,KAAKI,MAAM0O,GACpBA,EAAY7Q,EAAMzB,GAAGF,OACzBP,GAAW,IAbD,8BAgBdgM,EAAyB9O,QAAU,IAAI6O,OAGlC,CACLpM,QAAS,WACP,iBAAO,CACL5J,YACAyW,iBACApM,wBACAgM,iBACA+B,cACAvN,sBACAsL,uBACAhM,uBACA+L,kBACA4E,iBACA9Q,YACAwM,iBACAD,0BACArM,sBACAtB,oBACAgC,gBACAb,mBACAqM,6BACAnM,cACAG,cAAeP,KAEjB,IAEFlB,UAAWkD,EACTnD,EACAC,GACAC,IAEFuP,WACAnY,YACAC,gBACAC,MAAO,cAAkBA,GAAO,IAChC0Z,SAAU,cAAkBA,GAAU,CAACR,KACvCW,UAAW,cAAkBA,GAAW,IACxC5Z,MAAO,cAAkBA,GAAO,IAChCua,YAAa,cAAkBA,GAAa,IAC5CzQ,WAAY,cAAkBA,GAAY,IAC1C2Q,SAAU,cAAkBA,GAAU,IACtCkC,SAAU,cAAkBA,GAAU,O,mBC5wC1C,IAAIG,EAAW,SAAU/Y,GACvB,aAEA,IAEImB,EAFA6X,EAAKra,OAAOsa,UACZC,EAASF,EAAGG,eAEZC,EAA4B,oBAAX5X,OAAwBA,OAAS,GAClD6X,EAAiBD,EAAQ3X,UAAY,aACrC6X,EAAsBF,EAAQG,eAAiB,kBAC/CC,EAAoBJ,EAAQK,aAAe,gBAE/C,SAASC,EAAOrW,EAAK1D,EAAKc,GAOxB,OANA9B,OAAOmB,eAAeuD,EAAK1D,EAAK,CAC9Bc,MAAOA,EACPxB,YAAY,EACZ0a,cAAc,EACdC,UAAU,IAELvW,EAAI1D,GAEb,IAEE+Z,EAAO,GAAI,IACX,MAAOxY,GACPwY,EAAS,SAASrW,EAAK1D,EAAKc,GAC1B,OAAO4C,EAAI1D,GAAOc,GAItB,SAASoZ,EAAKC,EAASC,EAAShZ,EAAMiZ,GAEpC,IAAIC,EAAiBF,GAAWA,EAAQd,qBAAqBiB,EAAYH,EAAUG,EAC/EC,EAAYxb,OAAOyb,OAAOH,EAAehB,WACzCvH,EAAU,IAAI2I,EAAQL,GAAe,IAMzC,OAFAG,EAAUG,QAsMZ,SAA0BR,EAAS/Y,EAAM2Q,GACvC,IAAIyB,EAAQoH,EAEZ,OAAO,SAAgBC,EAAQja,GAC7B,GAAI4S,IAAUsH,EACZ,MAAM,IAAIC,MAAM,gCAGlB,GAAIvH,IAAUwH,EAAmB,CAC/B,GAAe,UAAXH,EACF,MAAMja,EAKR,OAAOqa,IAMT,IAHAlJ,EAAQ8I,OAASA,EACjB9I,EAAQnR,IAAMA,IAED,CACX,IAAIsa,EAAWnJ,EAAQmJ,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUnJ,GACnD,GAAIoJ,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,GAIX,GAAuB,SAAnBpJ,EAAQ8I,OAGV9I,EAAQuJ,KAAOvJ,EAAQwJ,MAAQxJ,EAAQnR,SAElC,GAAuB,UAAnBmR,EAAQ8I,OAAoB,CACrC,GAAIrH,IAAUoH,EAEZ,MADApH,EAAQwH,EACFjJ,EAAQnR,IAGhBmR,EAAQyJ,kBAAkBzJ,EAAQnR,SAEN,WAAnBmR,EAAQ8I,QACjB9I,EAAQ0J,OAAO,SAAU1J,EAAQnR,KAGnC4S,EAAQsH,EAER,IAAIY,EAASC,EAASxB,EAAS/Y,EAAM2Q,GACrC,GAAoB,WAAhB2J,EAAOld,KAAmB,CAO5B,GAJAgV,EAAQzB,EAAQhR,KACZia,EACAY,EAEAF,EAAO9a,MAAQya,EACjB,SAGF,MAAO,CACLva,MAAO4a,EAAO9a,IACdG,KAAMgR,EAAQhR,MAGS,UAAhB2a,EAAOld,OAChBgV,EAAQwH,EAGRjJ,EAAQ8I,OAAS,QACjB9I,EAAQnR,IAAM8a,EAAO9a,OA9QPib,CAAiB1B,EAAS/Y,EAAM2Q,GAE7CyI,EAcT,SAASmB,EAASxa,EAAIuC,EAAK9C,GACzB,IACE,MAAO,CAAEpC,KAAM,SAAUoC,IAAKO,EAAG2a,KAAKpY,EAAK9C,IAC3C,MAAOW,GACP,MAAO,CAAE/C,KAAM,QAASoC,IAAKW,IAhBjClB,EAAQ6Z,KAAOA,EAoBf,IAAIU,EAAyB,iBACzBgB,EAAyB,iBACzBd,EAAoB,YACpBE,EAAoB,YAIpBK,EAAmB,GAMvB,SAASd,KACT,SAASwB,KACT,SAASC,KAIT,IAAIC,EAAoB,GACxBA,EAAkBvC,GAAkB,WAClC,OAAOrY,MAGT,IAAI6a,EAAWld,OAAOmd,eAClBC,EAA0BF,GAAYA,EAASA,EAAS/T,EAAO,MAC/DiU,GACAA,IAA4B/C,GAC5BE,EAAOuC,KAAKM,EAAyB1C,KAGvCuC,EAAoBG,GAGtB,IAAIC,EAAKL,EAA2B1C,UAClCiB,EAAUjB,UAAYta,OAAOyb,OAAOwB,GAWtC,SAASK,EAAsBhD,GAC7B,CAAC,OAAQ,QAAS,UAAUvZ,SAAQ,SAAS8a,GAC3Cd,EAAOT,EAAWuB,GAAQ,SAASja,GACjC,OAAOS,KAAKsZ,QAAQE,EAAQja,SAkClC,SAAS2b,EAAc/B,EAAWgC,GAChC,SAASC,EAAO5B,EAAQja,EAAKJ,EAASC,GACpC,IAAIib,EAASC,EAASnB,EAAUK,GAASL,EAAW5Z,GACpD,GAAoB,UAAhB8a,EAAOld,KAEJ,CACL,IAAIqF,EAAS6X,EAAO9a,IAChBE,EAAQ+C,EAAO/C,MACnB,OAAIA,GACiB,kBAAVA,GACPyY,EAAOuC,KAAKhb,EAAO,WACd0b,EAAYhc,QAAQM,EAAM4b,SAASzb,MAAK,SAASH,GACtD2b,EAAO,OAAQ3b,EAAON,EAASC,MAC9B,SAASc,GACVkb,EAAO,QAASlb,EAAKf,EAASC,MAI3B+b,EAAYhc,QAAQM,GAAOG,MAAK,SAAS0b,GAI9C9Y,EAAO/C,MAAQ6b,EACfnc,EAAQqD,MACP,SAAS5F,GAGV,OAAOwe,EAAO,QAASxe,EAAOuC,EAASC,MAvBzCA,EAAOib,EAAO9a,KA4BlB,IAAIgc,EAgCJvb,KAAKsZ,QA9BL,SAAiBE,EAAQja,GACvB,SAASic,IACP,OAAO,IAAIL,GAAY,SAAShc,EAASC,GACvCgc,EAAO5B,EAAQja,EAAKJ,EAASC,MAIjC,OAAOmc,EAaLA,EAAkBA,EAAgB3b,KAChC4b,EAGAA,GACEA,KAkHV,SAASzB,EAAoBF,EAAUnJ,GACrC,IAAI8I,EAASK,EAASpZ,SAASiQ,EAAQ8I,QACvC,GAAIA,IAAWrZ,EAAW,CAKxB,GAFAuQ,EAAQmJ,SAAW,KAEI,UAAnBnJ,EAAQ8I,OAAoB,CAE9B,GAAIK,EAASpZ,SAAT,SAGFiQ,EAAQ8I,OAAS,SACjB9I,EAAQnR,IAAMY,EACd4Z,EAAoBF,EAAUnJ,GAEP,UAAnBA,EAAQ8I,QAGV,OAAOQ,EAIXtJ,EAAQ8I,OAAS,QACjB9I,EAAQnR,IAAM,IAAI4B,UAChB,kDAGJ,OAAO6Y,EAGT,IAAIK,EAASC,EAASd,EAAQK,EAASpZ,SAAUiQ,EAAQnR,KAEzD,GAAoB,UAAhB8a,EAAOld,KAIT,OAHAuT,EAAQ8I,OAAS,QACjB9I,EAAQnR,IAAM8a,EAAO9a,IACrBmR,EAAQmJ,SAAW,KACZG,EAGT,IAAIxa,EAAO6a,EAAO9a,IAElB,OAAMC,EAOFA,EAAKE,MAGPgR,EAAQmJ,EAAS4B,YAAcjc,EAAKC,MAGpCiR,EAAQnP,KAAOsY,EAAS6B,QAQD,WAAnBhL,EAAQ8I,SACV9I,EAAQ8I,OAAS,OACjB9I,EAAQnR,IAAMY,GAUlBuQ,EAAQmJ,SAAW,KACZG,GANExa,GA3BPkR,EAAQ8I,OAAS,QACjB9I,EAAQnR,IAAM,IAAI4B,UAAU,oCAC5BuP,EAAQmJ,SAAW,KACZG,GAoDX,SAAS2B,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxB5b,KAAKkc,WAAWhe,KAAK2d,GAGvB,SAASM,EAAcN,GACrB,IAAIxB,EAASwB,EAAMO,YAAc,GACjC/B,EAAOld,KAAO,gBACPkd,EAAO9a,IACdsc,EAAMO,WAAa/B,EAGrB,SAAShB,EAAQL,GAIfhZ,KAAKkc,WAAa,CAAC,CAAEJ,OAAQ,SAC7B9C,EAAYta,QAAQid,EAAc3b,MAClCA,KAAK/E,OAAM,GA8Bb,SAAS6L,EAAOuV,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAShE,GAC9B,GAAIiE,EACF,OAAOA,EAAe7B,KAAK4B,GAG7B,GAA6B,oBAAlBA,EAAS9a,KAClB,OAAO8a,EAGT,IAAK3T,MAAM2T,EAAS7d,QAAS,CAC3B,IAAIF,GAAK,EAAGiD,EAAO,SAASA,IAC1B,OAASjD,EAAI+d,EAAS7d,QACpB,GAAI0Z,EAAOuC,KAAK4B,EAAU/d,GAGxB,OAFAiD,EAAK9B,MAAQ4c,EAAS/d,GACtBiD,EAAK7B,MAAO,EACL6B,EAOX,OAHAA,EAAK9B,MAAQU,EACboB,EAAK7B,MAAO,EAEL6B,GAGT,OAAOA,EAAKA,KAAOA,GAKvB,MAAO,CAAEA,KAAMqY,GAIjB,SAASA,IACP,MAAO,CAAEna,MAAOU,EAAWT,MAAM,GA+MnC,OA5mBAgb,EAAkBzC,UAAY+C,EAAGuB,YAAc5B,EAC/CA,EAA2B4B,YAAc7B,EACzCA,EAAkBvX,YAAcuV,EAC9BiC,EACAnC,EACA,qBAaFxZ,EAAQwd,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,oBAAXD,GAAyBA,EAAOF,YAClD,QAAOG,IACHA,IAAShC,GAG2B,uBAAnCgC,EAAKvZ,aAAeuZ,EAAKjgB,QAIhCuC,EAAQ2d,KAAO,SAASF,GAQtB,OAPI9e,OAAOif,eACTjf,OAAOif,eAAeH,EAAQ9B,IAE9B8B,EAAOI,UAAYlC,EACnBjC,EAAO+D,EAAQjE,EAAmB,sBAEpCiE,EAAOxE,UAAYta,OAAOyb,OAAO4B,GAC1ByB,GAOTzd,EAAQ8d,MAAQ,SAASvd,GACvB,MAAO,CAAE8b,QAAS9b,IAsEpB0b,EAAsBC,EAAcjD,WACpCiD,EAAcjD,UAAUK,GAAuB,WAC7C,OAAOtY,MAEThB,EAAQkc,cAAgBA,EAKxBlc,EAAQ+d,MAAQ,SAASjE,EAASC,EAAShZ,EAAMiZ,EAAamC,QACxC,IAAhBA,IAAwBA,EAAcxb,SAE1C,IAAIqd,EAAO,IAAI9B,EACbrC,EAAKC,EAASC,EAAShZ,EAAMiZ,GAC7BmC,GAGF,OAAOnc,EAAQwd,oBAAoBzD,GAC/BiE,EACAA,EAAKzb,OAAO3B,MAAK,SAAS4C,GACxB,OAAOA,EAAO9C,KAAO8C,EAAO/C,MAAQud,EAAKzb,WAuKjD0Z,EAAsBD,GAEtBtC,EAAOsC,EAAIxC,EAAmB,aAO9BwC,EAAG3C,GAAkB,WACnB,OAAOrY,MAGTgb,EAAGiC,SAAW,WACZ,MAAO,sBAkCTje,EAAQtB,KAAO,SAASF,GACtB,IAAIE,EAAO,GACX,IAAK,IAAIiB,KAAOnB,EACdE,EAAKQ,KAAKS,GAMZ,OAJAjB,EAAKwf,UAIE,SAAS3b,IACd,KAAO7D,EAAKc,QAAQ,CAClB,IAAIG,EAAMjB,EAAKyf,MACf,GAAIxe,KAAOnB,EAGT,OAFA+D,EAAK9B,MAAQd,EACb4C,EAAK7B,MAAO,EACL6B,EAQX,OADAA,EAAK7B,MAAO,EACL6B,IAsCXvC,EAAQ8H,OAASA,EAMjBuS,EAAQpB,UAAY,CAClBsE,YAAalD,EAEbpe,MAAO,SAASmiB,GAcd,GAbApd,KAAKqd,KAAO,EACZrd,KAAKuB,KAAO,EAGZvB,KAAKia,KAAOja,KAAKka,MAAQ/Z,EACzBH,KAAKN,MAAO,EACZM,KAAK6Z,SAAW,KAEhB7Z,KAAKwZ,OAAS,OACdxZ,KAAKT,IAAMY,EAEXH,KAAKkc,WAAWxd,QAAQyd,IAEnBiB,EACH,IAAK,IAAI3gB,KAAQuD,KAEQ,MAAnBvD,EAAK6gB,OAAO,IACZpF,EAAOuC,KAAKza,KAAMvD,KACjBiM,OAAOjM,EAAK4N,MAAM,MACrBrK,KAAKvD,GAAQ0D,IAMrBod,KAAM,WACJvd,KAAKN,MAAO,EAEZ,IACI8d,EADYxd,KAAKkc,WAAW,GACLE,WAC3B,GAAwB,UAApBoB,EAAWrgB,KACb,MAAMqgB,EAAWje,IAGnB,OAAOS,KAAKyd,MAGdtD,kBAAmB,SAASuD,GAC1B,GAAI1d,KAAKN,KACP,MAAMge,EAGR,IAAIhN,EAAU1Q,KACd,SAAS2d,EAAOC,EAAKC,GAYnB,OAXAxD,EAAOld,KAAO,QACdkd,EAAO9a,IAAMme,EACbhN,EAAQnP,KAAOqc,EAEXC,IAGFnN,EAAQ8I,OAAS,OACjB9I,EAAQnR,IAAMY,KAGN0d,EAGZ,IAAK,IAAIvf,EAAI0B,KAAKkc,WAAW1d,OAAS,EAAGF,GAAK,IAAKA,EAAG,CACpD,IAAIud,EAAQ7b,KAAKkc,WAAW5d,GACxB+b,EAASwB,EAAMO,WAEnB,GAAqB,SAAjBP,EAAMC,OAIR,OAAO6B,EAAO,OAGhB,GAAI9B,EAAMC,QAAU9b,KAAKqd,KAAM,CAC7B,IAAIS,EAAW5F,EAAOuC,KAAKoB,EAAO,YAC9BkC,EAAa7F,EAAOuC,KAAKoB,EAAO,cAEpC,GAAIiC,GAAYC,EAAY,CAC1B,GAAI/d,KAAKqd,KAAOxB,EAAME,SACpB,OAAO4B,EAAO9B,EAAME,UAAU,GACzB,GAAI/b,KAAKqd,KAAOxB,EAAMG,WAC3B,OAAO2B,EAAO9B,EAAMG,iBAGjB,GAAI8B,GACT,GAAI9d,KAAKqd,KAAOxB,EAAME,SACpB,OAAO4B,EAAO9B,EAAME,UAAU,OAG3B,KAAIgC,EAMT,MAAM,IAAIrE,MAAM,0CALhB,GAAI1Z,KAAKqd,KAAOxB,EAAMG,WACpB,OAAO2B,EAAO9B,EAAMG,gBAU9B5B,OAAQ,SAASjd,EAAMoC,GACrB,IAAK,IAAIjB,EAAI0B,KAAKkc,WAAW1d,OAAS,EAAGF,GAAK,IAAKA,EAAG,CACpD,IAAIud,EAAQ7b,KAAKkc,WAAW5d,GAC5B,GAAIud,EAAMC,QAAU9b,KAAKqd,MACrBnF,EAAOuC,KAAKoB,EAAO,eACnB7b,KAAKqd,KAAOxB,EAAMG,WAAY,CAChC,IAAIgC,EAAenC,EACnB,OAIAmC,IACU,UAAT7gB,GACS,aAATA,IACD6gB,EAAalC,QAAUvc,GACvBA,GAAOye,EAAahC,aAGtBgC,EAAe,MAGjB,IAAI3D,EAAS2D,EAAeA,EAAa5B,WAAa,GAItD,OAHA/B,EAAOld,KAAOA,EACdkd,EAAO9a,IAAMA,EAETye,GACFhe,KAAKwZ,OAAS,OACdxZ,KAAKuB,KAAOyc,EAAahC,WAClBhC,GAGFha,KAAKie,SAAS5D,IAGvB4D,SAAU,SAAS5D,EAAQ4B,GACzB,GAAoB,UAAhB5B,EAAOld,KACT,MAAMkd,EAAO9a,IAcf,MAXoB,UAAhB8a,EAAOld,MACS,aAAhBkd,EAAOld,KACT6C,KAAKuB,KAAO8Y,EAAO9a,IACM,WAAhB8a,EAAOld,MAChB6C,KAAKyd,KAAOzd,KAAKT,IAAM8a,EAAO9a,IAC9BS,KAAKwZ,OAAS,SACdxZ,KAAKuB,KAAO,OACa,WAAhB8Y,EAAOld,MAAqB8e,IACrCjc,KAAKuB,KAAO0a,GAGPjC,GAGTkE,OAAQ,SAASlC,GACf,IAAK,IAAI1d,EAAI0B,KAAKkc,WAAW1d,OAAS,EAAGF,GAAK,IAAKA,EAAG,CACpD,IAAIud,EAAQ7b,KAAKkc,WAAW5d,GAC5B,GAAIud,EAAMG,aAAeA,EAGvB,OAFAhc,KAAKie,SAASpC,EAAMO,WAAYP,EAAMI,UACtCE,EAAcN,GACP7B,IAKb,MAAS,SAAS8B,GAChB,IAAK,IAAIxd,EAAI0B,KAAKkc,WAAW1d,OAAS,EAAGF,GAAK,IAAKA,EAAG,CACpD,IAAIud,EAAQ7b,KAAKkc,WAAW5d,GAC5B,GAAIud,EAAMC,SAAWA,EAAQ,CAC3B,IAAIzB,EAASwB,EAAMO,WACnB,GAAoB,UAAhB/B,EAAOld,KAAkB,CAC3B,IAAIghB,EAAS9D,EAAO9a,IACpB4c,EAAcN,GAEhB,OAAOsC,GAMX,MAAM,IAAIzE,MAAM,0BAGlB0E,cAAe,SAAS/B,EAAUZ,EAAYC,GAa5C,OAZA1b,KAAK6Z,SAAW,CACdpZ,SAAUqG,EAAOuV,GACjBZ,WAAYA,EACZC,QAASA,GAGS,SAAhB1b,KAAKwZ,SAGPxZ,KAAKT,IAAMY,GAGN6Z,IAQJhb,EA7sBM,CAotBgBD,EAAOC,SAGtC,IACEqf,mBAAqBtG,EACrB,MAAOuG,GAUPC,SAAS,IAAK,yBAAdA,CAAwCxG","file":"static/js/13.08c9fe27.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/plant.bf2ec0c2.png\";","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport plant from \"../images/plant.png\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"../styles/Contacts.css\";\r\nconst Contacts = () => {\r\n  const { register, handleSubmit, watch, reset } = useForm();\r\n  const watchAllFields = watch();\r\n\r\n  const handleSendForm = (data) => {\r\n    //The data that's needed to be stored\r\n    //const { name, email, subject, message } = data;\r\n\r\n    if (!validateEmail()) {\r\n      //Maybe there is a way to check error with useForm\r\n      Swal.fire({\r\n        title: \"Message Sent.\",\r\n        icon: \"success\",\r\n        html: \"We'll be in touch!\",\r\n        width: 600,\r\n        padding: \"3em\",\r\n        backdrop: `\r\n      rgba(33, 107, 101, 0.3)\r\n      url(\"${plant}\")\r\n      top center\r\n      no-repeat\r\n      `,\r\n      });\r\n\r\n      //Reset Fields\r\n      reset(data);\r\n    } else {\r\n      Swal.fire({\r\n        title: \"Validation error.\",\r\n        icon: \"error\",\r\n        html: \"Please confirm the fields and submit it again.\",\r\n        width: 300,\r\n        toast: true,\r\n        position: \"center\",\r\n      });\r\n    }\r\n  };\r\n  const validateEmail = () => {\r\n    return !watchAllFields?.email?.match(\r\n      \"^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*$\" //Not a perfect email validator\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"contacts-header\">CONTACT</h1>\r\n\r\n      <form className=\"contacts-form\" onSubmit={handleSubmit(handleSendForm)}>\r\n        <TextField\r\n          {...register(\"name\")}\r\n          className=\"text-field\"\r\n          required\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          label=\"Full Name\"\r\n          autoComplete=\"name\"\r\n        />\r\n        <TextField\r\n          {...register(\"email\")}\r\n          id=\"email\"\r\n          name=\"email\"\r\n          className=\"text-field\"\r\n          required\r\n          variant=\"outlined\"\r\n          label=\"Email\"\r\n          margin=\"normal\"\r\n          autoComplete=\"email\"\r\n          error={validateEmail()}\r\n          helperText={validateEmail() ? \"Incorrect Email.\" : \"\"}\r\n        />\r\n        <TextField\r\n          {...register(\"subject\")}\r\n          id=\"subject\"\r\n          name=\"subject\"\r\n          className=\"text-field\"\r\n          required\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          label=\"Subject\"\r\n        />\r\n        <TextField\r\n          {...register(\"message\")}\r\n          id=\"message\"\r\n          name=\"message\"\r\n          className=\"text-field\"\r\n          required\r\n          margin=\"normal\"\r\n          multiline\r\n          variant=\"outlined\"\r\n          label=\"Your Message\"\r\n        />\r\n        <Button\r\n          style={{ background: \"#216b65\", color: \"whitesmoke\" }}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          size=\"large\"\r\n        >\r\n          Send\r\n        </Button>\r\n      </form>\r\n      <img id=\"plant-icon\" src={plant} alt=\"plant-icon\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) || isFieldArray\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  get(fieldsRef.current, name)._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else if (get(fieldsRef.current, name)) {\n        get(fieldsRef.current, name)._f.mount = false;\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef?: React.MutableRefObject<FieldValues>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  options &&\n  mounted &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldErrors,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FormStateSubjectRef,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef<FormStateSubjectRef<TFieldValues>>(\n    new Subject(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      formValues: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const inFieldArrayActionRef = React.useRef(false);\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () => {\n    formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n\n    return formStateRef.current.isValid;\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        (get(fieldsWithValidationRef.current, name) || resolverRef.current) &&\n          set(validFieldsRef.current, name, true);\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldRender ||\n          isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(state) ||\n          (readFormStateRef.current.isValid &&\n            formStateRef.current.isValid !==\n              (resolverRef.current ? !!isValid : getIsValid()))) &&\n        !isNullOrUndefined(shouldRender)\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(\n          isWatched ? { name } : updatedFormState,\n        );\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            controllerSubjectRef.current.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          options.shouldDirty && updateAndGetDirtyState(name, value);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n          name,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    let isValid = true;\n\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            isValid = false;\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n\n    return isValid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : (convertToArrayPayload(name) as InternalFieldName[]);\n      let isValid;\n      let schemaResult: FieldErrors<TFieldValues> | {} = {};\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        schemaResult = await executeSchemaOrResolverValidation(\n          fields,\n          isUndefined(name) ? undefined : (fields as FieldName<TFieldValues>[]),\n        );\n        isValid = fields.every((name) => !get(schemaResult, name));\n      } else {\n        isValid = isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean);\n      }\n\n      formStateSubjectRef.current.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current\n          ? isEmptyObject(schemaResult)\n          : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options, field._f.mount) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          updateFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, formValues: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              formValues: getValues(),\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(\n              isWatched ? { name } : { ...state, name },\n            )\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            formValues: getValues(),\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = formValues\n        ? formValues\n        : isMountedRef.current\n        ? {\n            ...defaultValuesRef.current,\n            ...getFieldsValues(fieldsRef),\n          }\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue\n        : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && watchFieldsRef.current.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n          formValues: getValues(),\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref || {},\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      hasValidation(options, true) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name) as Field;\n                const shouldUnmount =\n                  shouldUnregister || (options && options.shouldUnregister);\n                field && (field._f.mount = false);\n\n                if (\n                  isWeb &&\n                  (isNameInFieldArray(fieldArrayNamesRef.current, name)\n                    ? shouldUnmount && !inFieldArrayActionRef.current\n                    : shouldUnmount)\n                ) {\n                  unregisterFieldsNamesRef.current.add(name);\n                }\n              }\n            },\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } catch {\n        hasNoPromiseError = false;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    value: T,\n    name = '',\n  ): void => {\n    const field = get(fieldsRef.current, name);\n\n    !field &&\n      (isPrimitive(value) ||\n        (isWeb && (value instanceof File || value instanceof Date))) &&\n      set(fieldsRef.current, name, {\n        _f: {\n          ref: { name, value },\n          value,\n          name,\n        },\n      });\n\n    if (field && field._f && field._f.refs) {\n      return;\n    }\n\n    if (Array.isArray(value) || isObject(value)) {\n      if (name && !get(fieldsRef.current, name)) {\n        set(fieldsRef.current, name, Array.isArray(value) ? [] : {});\n      }\n\n      for (const key in value) {\n        registerAbsentFields(value[key], name + (name ? '.' : '') + key);\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        formValues: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      registerAbsentFields({ ...updatedValues });\n\n    resetFromState(keepStateOptions, values);\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    registerAbsentFields(defaultValuesRef.current);\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n\n    for (const name of unregisterFieldsNamesRef.current) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        inFieldArrayActionRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}